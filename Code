// 4-step idea generator with Step 3.5 AI Chat Refinement
import {
    useState,
    startTransition,
    useEffect,
    useCallback,
    useRef,
    useMemo,
    type CSSProperties,
} from "react"
import { motion, AnimatePresence } from "framer-motion"
import { addPropertyControls, ControlType, useIsStaticRenderer } from "framer"

interface IdeaGeneratorProps {
    backgroundColor: string
    cardColor: string
    primaryColor: string
    textColor: string
    accentColor: string
    headingFont: any
    bodyFont: any
    buttonFont: any
    preview: boolean
    style?: CSSProperties
}

interface ChatMessage {
    id: string
    type: "ai" | "user"
    content: string
    options?: string[]
}

type ErrorType = "network" | "timeout" | "server" | "unknown"

interface ApiError {
    type: ErrorType
    message: string
    retryable: boolean
}

export default function IdeaGenerator(props: IdeaGeneratorProps) {
    const {
        backgroundColor,
        cardColor,
        primaryColor,
        textColor,
        accentColor,
        headingFont,
        bodyFont,
        buttonFont,
        preview,
    } = props

    const [isExpanded, setIsExpanded] = useState(false)
    const [currentStep, setCurrentStep] = useState(1)
    const [selectedStyle, setSelectedStyle] = useState("")
    const [customStyleName, setCustomStyleName] = useState("")
    const [broadTopic, setBroadTopic] = useState("")
    const [keyword, setKeyword] = useState("")
    const [scriptLength, setScriptLength] = useState(45)
    const [selectedLanguage, setSelectedLanguage] = useState("Select")
    const [selectedTone, setSelectedTone] = useState("Select")
    const [ctaInclusion, setCtaInclusion] = useState(false)
    const [outputType, setOutputType] = useState("script")
    const [showDetails, setShowDetails] = useState(false)
    const [copySuccess, setCopySuccess] = useState(false)
    const [hoveredPopup, setHoveredPopup] = useState<{
        type: string
        content: any
        x: number
        y: number
    } | null>(null)

    const [chatMessages, setChatMessages] = useState<ChatMessage[]>([])
    const [userInput, setUserInput] = useState("")
    const [isTyping, setIsTyping] = useState(false)
    const [skipRefinement, setSkipRefinement] = useState(false)
    const [showSkipConfirm, setShowSkipConfirm] = useState(false)
    const chatScrollRef = useRef<HTMLDivElement>(null)
    const inputRef = useRef<HTMLInputElement>(null)

    const [apiResults, setApiResults] = useState<any>(null)
    const [isLoading, setIsLoading] = useState(false)
    const [apiError, setApiError] = useState<ApiError | null>(null)
    const [retryCount, setRetryCount] = useState(0)
    const [loadingProgress, setLoadingProgress] = useState(0)
    const [estimatedTime, setEstimatedTime] = useState(0)

    const [scoreData, setScoreData] = useState<{
        overall: number
        creativity: number
        engagement: number
        clarity: number
        timing: number
    } | null>(null)
    const [isEditMode, setIsEditMode] = useState(false)
    const [editedScript, setEditedScript] = useState("")
    const [regenerateRequest, setRegenerateRequest] = useState("")

    const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false)

    const isStatic = useIsStaticRenderer()

    const videoStyles = [
        { id: "meme", title: "Meme", description: "Trending/funny meme clips" },
        {
            id: "quicktip",
            title: "Quick Tip",
            description: "Super fast practical tips",
        },
        {
            id: "challenge",
            title: "Challenge",
            description: "Viral challenges & experiments",
        },
        {
            id: "storytelling",
            title: "Storytelling",
            description: "Short, twisty personal stories",
        },
        {
            id: "productplug",
            title: "Product Plug",
            description: "Natural, real-life product use",
        },
        {
            id: "faceless",
            title: "Faceless Content",
            description: "Voiceover/TTS, no face on camera",
        },
        { id: "other", title: "Other", description: "Custom style" },
    ]

    const languages = [
        "English",
        "Spanish",
        "French",
        "German",
        "Italian",
        "Portuguese",
        "Dutch",
        "Russian",
        "Chinese",
        "Japanese",
        "Korean",
        "Arabic",
    ] as const
    const LANGUAGE_CODE: Record<(typeof languages)[number], string> = {
        English: "en",
        Spanish: "es",
        French: "fr",
        German: "de",
        Italian: "it",
        Portuguese: "pt",
        Dutch: "nl",
        Russian: "ru",
        Chinese: "zh",
        Japanese: "ja",
        Korean: "ko",
        Arabic: "ar",
    }

    // Auto-save to sessionStorage
    useEffect(() => {
        if (!isExpanded) return

        const state = {
            currentStep,
            selectedStyle,
            customStyleName,
            broadTopic,
            keyword,
            scriptLength,
            selectedLanguage,
            selectedTone,
            ctaInclusion,
            outputType,
            chatMessages,
            timestamp: Date.now(),
        }

        try {
            sessionStorage.setItem("ideaGenerator_state", JSON.stringify(state))
        } catch (e) {
            console.warn("Failed to save state:", e)
        }
    }, [
        isExpanded,
        currentStep,
        selectedStyle,
        customStyleName,
        broadTopic,
        keyword,
        scriptLength,
        selectedLanguage,
        selectedTone,
        ctaInclusion,
        outputType,
        chatMessages,
    ])

    // Restore from sessionStorage
    useEffect(() => {
        if (isExpanded) return

        try {
            const saved = sessionStorage.getItem("ideaGenerator_state")
            if (saved) {
                const state = JSON.parse(saved)
                const age = Date.now() - (state.timestamp || 0)
                // Restore if less than 1 hour old
                if (age < 3600000) {
                    setHasUnsavedChanges(true)
                }
            }
        } catch (e) {
            console.warn("Failed to restore state:", e)
        }
    }, [isExpanded])

    const safeJsonParse = (t: string) => {
        try {
            return JSON.parse(t)
        } catch {
            return t
        }
    }

    const normalizeResult = (input: any): any => {
        if (input == null) return ""
        if (typeof input === "string") return input
        if (typeof input === "object") {
            if (typeof (input as any).result === "string")
                return (input as any).result
            if (
                (input as any).result &&
                typeof (input as any).result === "object"
            )
                return (input as any).result
            if (
                (input as any).result &&
                typeof (input as any).result.content === "string"
            )
                return (input as any).result.content
            return input
        }
        return String(input)
    }

    const createApiError = (error: any): ApiError => {
        if (error?.name === "AbortError") {
            return {
                type: "timeout",
                message:
                    "Request took too long. The AI might be busy - try again in a moment.",
                retryable: true,
            }
        }

        if (!navigator.onLine) {
            return {
                type: "network",
                message:
                    "No internet connection. Check your network and try again.",
                retryable: true,
            }
        }

        if (error?.message?.includes("HTTP 5")) {
            return {
                type: "server",
                message:
                    "Server is temporarily unavailable. This usually resolves quickly.",
                retryable: true,
            }
        }

        if (error?.message?.includes("HTTP 4")) {
            return {
                type: "server",
                message:
                    "Invalid request. Please check your inputs and try again.",
                retryable: false,
            }
        }

        return {
            type: "unknown",
            message:
                error?.message || "Something went wrong. Please try again.",
            retryable: true,
        }
    }

    const sleep = (ms: number) =>
        new Promise((resolve) => setTimeout(resolve, ms))

    const fetchWithRetry = async (
        url: string,
        options: RequestInit,
        maxRetries = 3
    ): Promise<Response> => {
        let lastError: any

        for (let i = 0; i <= maxRetries; i++) {
            try {
                if (i > 0) {
                    const backoff = Math.min(1000 * Math.pow(2, i - 1), 8000)
                    await sleep(backoff)
                    setRetryCount(i)
                }

                const response = await fetch(url, options)

                if (response.status >= 500 && i < maxRetries) {
                    lastError = new Error(`HTTP ${response.status}`)
                    continue
                }

                return response
            } catch (error: any) {
                lastError = error
                if (error.name !== "AbortError" && i < maxRetries) {
                    continue
                }
                throw error
            }
        }

        throw lastError
    }

    // Fetch next refinement question
    const fetchNextQuestion = useCallback(async () => {
        const conversationHistory = chatMessages.map((msg) => {
            if (msg.type === "ai") {
                return {
                    role: "assistant",
                    question: msg.content,
                    ...(msg.options ? { options: msg.options } : {}),
                }
            } else {
                return {
                    role: "user",
                    answer: msg.content,
                }
            }
        })

        const requestData = {
            phase: "refinement-question-only",
            conversationHistory,
            keyword,
            style: selectedStyle === "other" ? customStyleName : selectedStyle,
            scriptLength,
            tone: selectedTone,
            language:
                LANGUAGE_CODE[selectedLanguage as keyof typeof LANGUAGE_CODE] ||
                selectedLanguage,
        }

        try {
            const controller = new AbortController()
            const timer = setTimeout(() => controller.abort(), 60000)

            const res = await fetchWithRetry(
                "https://scripto-api.vercel.app/api/generate-content",
                {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        Accept: "application/json",
                    },
                    body: JSON.stringify(requestData),
                    signal: controller.signal,
                },
                2
            )

            clearTimeout(timer)

            if (!res.ok) throw new Error(`HTTP ${res.status}`)
            const data = await res.json()
            return data
        } catch (e: any) {
            console.error("Question generation failed:", e)
            return { question: null, options: [] }
        }
    }, [
        chatMessages,
        keyword,
        selectedStyle,
        customStyleName,
        scriptLength,
        selectedTone,
        selectedLanguage,
    ])

    const calculateScores = useCallback(() => {
        if (!apiResults) return

        const scriptText =
            typeof apiResults === "string"
                ? apiResults
                : apiResults.script || ""
        const words = scriptText.split(" ").length
        const expectedWords = (scriptLength / 60) * 150

        const timingScore = Math.max(
            0,
            100 - (Math.abs(words - expectedWords) / expectedWords) * 100
        )

        const sentences = scriptText
            .split(/[.!?]+/)
            .filter((s) => s.trim().length > 0)
        const avgWordsPerSentence = words / sentences.length
        const clarityScore = Math.max(
            0,
            100 - Math.abs(avgWordsPerSentence - 15) * 5
        )

        const hasQuestions = /\?/.test(scriptText)
        const hasCTA =
            ctaInclusion &&
            (scriptText.toLowerCase().includes("subscribe") ||
                scriptText.toLowerCase().includes("follow") ||
                scriptText.toLowerCase().includes("like"))
        const engagementScore = 70 + (hasQuestions ? 15 : 0) + (hasCTA ? 15 : 0)

        const uniqueWords = new Set(scriptText.toLowerCase().split(/\W+/))
        const creativityScore = Math.min(100, (uniqueWords.size / words) * 200)

        const overall = Math.round(
            (timingScore + clarityScore + engagementScore + creativityScore) / 4
        )

        setScoreData({
            overall,
            creativity: Math.round(creativityScore),
            engagement: Math.round(engagementScore),
            clarity: Math.round(clarityScore),
            timing: Math.round(timingScore),
        })
    }, [apiResults, scriptLength, ctaInclusion])

    useEffect(() => {
        if (apiResults && currentStep === 4) {
            calculateScores()
        }
    }, [apiResults, currentStep, calculateScores])

    const regenerateWithEdit = useCallback(async () => {
        if (!regenerateRequest.trim()) return

        setIsLoading(true)
        setApiError(null)
        setScoreData(null)
        setLoadingProgress(0)
        setRetryCount(0)
        setEstimatedTime(outputType === "complete" ? 45 : 25)

        const progressInterval = setInterval(() => {
            setLoadingProgress((prev) => Math.min(prev + 2, 90))
        }, 500)

        const requestData = {
            text: keyword + " - " + regenerateRequest,
            style: selectedStyle === "other" ? customStyleName : selectedStyle,
            length: scriptLength,
            tone: selectedTone,
            language:
                LANGUAGE_CODE[selectedLanguage as keyof typeof LANGUAGE_CODE] ||
                selectedLanguage,
            ctaInclusion: ctaInclusion,
            outputType: outputType,
            previousScript:
                editedScript ||
                (typeof apiResults === "string"
                    ? apiResults
                    : apiResults?.script),
        }

        const controller = new AbortController()
        const timer = setTimeout(() => controller.abort(), 90000)

        try {
            const response = await fetchWithRetry(
                "https://scripto-api.vercel.app/api/generate-content",
                {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        Accept: "application/json, text/plain, */*",
                    },
                    cache: "no-store",
                    body: JSON.stringify(requestData),
                    signal: controller.signal,
                },
                2
            )

            const ctype = response.headers.get("content-type") || ""

            if (!response.ok) {
                const errText = await response.text().catch(() => "")
                throw new Error(
                    `HTTP ${response.status} ${response.statusText}` +
                        (errText ? ` · ${errText.slice(0, 300)}` : "")
                )
            }

            if (ctype.includes("text/event-stream")) {
                const reader = response.body?.getReader()
                if (!reader)
                    throw new Error(
                        "Streaming not supported in this environment."
                    )
                const decoder = new TextDecoder()
                let acc = ""
                while (true) {
                    const { value, done } = await reader.read()
                    if (done) break
                    acc += decoder.decode(value, { stream: true })
                    setApiResults(acc)
                    setLoadingProgress((prev) => Math.min(prev + 1, 95))
                }
                setApiResults(normalizeResult(safeJsonParse(acc.trim())))
                setLoadingProgress(100)
                setRegenerateRequest("")
                setIsEditMode(false)
                return
            }

            if (ctype.includes("application/json")) {
                const data = await response.json()
                setApiResults(normalizeResult(data))
                setLoadingProgress(100)
                setRegenerateRequest("")
                setIsEditMode(false)
                return
            }

            const text = await response.text()
            const maybeJson = safeJsonParse(text)
            setApiResults(normalizeResult(maybeJson))
            setLoadingProgress(100)
            setRegenerateRequest("")
            setIsEditMode(false)
        } catch (error: any) {
            const apiErr = createApiError(error)
            setApiError(apiErr)
            console.error("API error:", error)
        } finally {
            clearTimeout(timer)
            clearInterval(progressInterval)
            setIsLoading(false)
            setRetryCount(0)
        }
    }, [
        regenerateRequest,
        editedScript,
        keyword,
        selectedStyle,
        customStyleName,
        scriptLength,
        selectedTone,
        selectedLanguage,
        ctaInclusion,
        outputType,
        apiResults,
    ])

    const handleChatResponse = useCallback(
        async (response: string, messageId?: string) => {
            // 옵션 버튼 클릭 시 해당 메시지의 options 제거
            if (messageId) {
                setChatMessages((prev) =>
                    prev.map((msg) =>
                        msg.id === messageId
                            ? { ...msg, options: undefined }
                            : msg
                    )
                )
            }

            setChatMessages((prev) => [
                ...prev,
                {
                    id: Date.now().toString(),
                    type: "user",
                    content: response,
                },
            ])
            setUserInput("")
            setIsTyping(true)

            setTimeout(async () => {
                const nextQ = await fetchNextQuestion()

                if (nextQ.question) {
                    setChatMessages((prev) => [
                        ...prev,
                        {
                            id: (Date.now() + 1).toString(),
                            type: "ai",
                            content: nextQ.question,
                            options: nextQ.options || [],
                        },
                    ])
                    setIsTyping(false)
                } else {
                    setChatMessages((prev) => [
                        ...prev,
                        {
                            id: (Date.now() + 1).toString(),
                            type: "ai",
                            content:
                                "Perfect! Let me generate your final script now.",
                        },
                    ])
                    setIsTyping(false)
                    setTimeout(() => setCurrentStep(4), 1500)
                }
            }, 1000)
        },
        [fetchNextQuestion]
    )

    const handleSkipRefinement = useCallback(() => {
        setShowSkipConfirm(true)
    }, [])

    const confirmSkip = useCallback(() => {
        setSkipRefinement(true)
        setShowSkipConfirm(false)
        setCurrentStep(4)
    }, [])

    const fetchFinalScript = useCallback(async () => {
        setIsLoading(true)
        setApiError(null)
        setApiResults(null)
        setScoreData(null)
        setLoadingProgress(0)
        setRetryCount(0)
        setEstimatedTime(outputType === "complete" ? 45 : 25)

        const progressInterval = setInterval(() => {
            setLoadingProgress((prev) => Math.min(prev + 1.5, 85))
        }, 500)

        const refinementContext = chatMessages
            .filter((m) => m.type === "user")
            .map((m) => m.content)
            .join(", ")

        const requestData = {
            text: keyword,
            style: selectedStyle === "other" ? customStyleName : selectedStyle,
            length: scriptLength,
            tone: selectedTone,
            language:
                LANGUAGE_CODE[selectedLanguage as keyof typeof LANGUAGE_CODE] ||
                selectedLanguage,
            ctaInclusion,
            outputType,
            refinementContext: skipRefinement ? null : refinementContext,
            phase: "final",
        }

        const controller = new AbortController()
        const timer = setTimeout(() => controller.abort(), 90000)

        try {
            const response = await fetchWithRetry(
                "https://scripto-api.vercel.app/api/generate-content",
                {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        Accept: "application/json, text/plain, */*",
                    },
                    cache: "no-store",
                    body: JSON.stringify(requestData),
                    signal: controller.signal,
                },
                2
            )

            const ctype = response.headers.get("content-type") || ""
            if (!response.ok) {
                const errText = await response.text().catch(() => "")
                throw new Error(
                    `HTTP ${response.status} ${response.statusText}${errText ? ` · ${errText.slice(0, 300)}` : ""}`
                )
            }

            if (ctype.includes("text/event-stream")) {
                const reader = response.body?.getReader()
                if (!reader)
                    throw new Error(
                        "Streaming not supported in this environment."
                    )
                const decoder = new TextDecoder()
                let acc = ""
                while (true) {
                    const { value, done } = await reader.read()
                    if (done) break
                    acc += decoder.decode(value, { stream: true })
                    setApiResults(acc)
                    setLoadingProgress((prev) => Math.min(prev + 1, 95))
                }
                setApiResults(normalizeResult(safeJsonParse(acc.trim())))
                setLoadingProgress(100)
                return
            }

            if (ctype.includes("application/json")) {
                const data = await response.json()
                setApiResults(normalizeResult(data))
                setLoadingProgress(100)
                return
            }

            const text = await response.text()
            setApiResults(normalizeResult(safeJsonParse(text)))
            setLoadingProgress(100)
        } catch (error: any) {
            const apiErr = createApiError(error)
            setApiError(apiErr)
        } finally {
            clearTimeout(timer)
            clearInterval(progressInterval)
            setIsLoading(false)
            setRetryCount(0)
        }
    }, [
        keyword,
        selectedStyle,
        customStyleName,
        scriptLength,
        selectedTone,
        selectedLanguage,
        ctaInclusion,
        outputType,
        chatMessages,
        skipRefinement,
    ])

    useEffect(() => {
        if (currentStep === 4 && !apiResults && !isLoading) {
            fetchFinalScript()
        }
    }, [currentStep, fetchFinalScript, apiResults, isLoading])

    // Step 3.5 entry
    useEffect(() => {
        if (
            currentStep === (3.5 as any) &&
            chatMessages.length === 0 &&
            !isLoading
        ) {
            setIsLoading(true)
            fetchNextQuestion().then((firstQ) => {
                if (firstQ.question) {
                    setChatMessages([
                        {
                            id: Date.now().toString(),
                            type: "ai",
                            content: firstQ.question,
                            options: firstQ.options || [],
                        },
                    ])
                }
                setIsLoading(false)
            })
        }
    }, [currentStep, chatMessages, fetchNextQuestion, isLoading])

    useEffect(() => {
        if (chatScrollRef.current) {
            chatScrollRef.current.scrollTop = chatScrollRef.current.scrollHeight
        }
    }, [chatMessages, isTyping])

    // Focus management
    useEffect(() => {
        if (currentStep === (3.5 as any) && inputRef.current) {
            inputRef.current.focus()
        }
    }, [currentStep, chatMessages])

    const copyToClipboard = useCallback(async () => {
        if (!apiResults || typeof window === "undefined") return

        try {
            let textToCopy = ""

            if (typeof apiResults === "string") {
                textToCopy = editedScript || apiResults
            } else if (apiResults && typeof apiResults === "object") {
                const parts = []

                if (apiResults.script || editedScript) {
                    parts.push("SCRIPT")
                    parts.push("=" + "=".repeat(50))
                    parts.push(editedScript || apiResults.script)
                    parts.push("")
                }

                if (apiResults.transitions?.length) {
                    parts.push("TRANSITIONS & CUTS")
                    parts.push("=" + "=".repeat(50))
                    apiResults.transitions.forEach((t: any) => {
                        parts.push(`${t.time} - ${t.type}: ${t.description}`)
                    })
                    parts.push("")
                }

                if (apiResults.bRoll?.length) {
                    parts.push("B-ROLL SUGGESTIONS")
                    parts.push("=" + "=".repeat(50))
                    apiResults.bRoll.forEach((b: any) => {
                        parts.push(`${b.timeRange} - ${b.content}`)
                    })
                    parts.push("")
                }

                if (apiResults.textOverlays?.length) {
                    parts.push("TEXT OVERLAYS")
                    parts.push("=" + "=".repeat(50))
                    apiResults.textOverlays.forEach((t: any) => {
                        parts.push(`${t.time} - "${t.text}" (${t.style})`)
                    })
                    parts.push("")
                }

                if (apiResults.soundEffects?.length) {
                    parts.push("SOUND EFFECTS")
                    parts.push("=" + "=".repeat(50))
                    apiResults.soundEffects.forEach((s: any) => {
                        parts.push(`${s.time} - ${s.effect}`)
                    })
                }

                textToCopy = parts.join("\n")
            }

            await navigator.clipboard.writeText(textToCopy)
            setCopySuccess(true)
            setTimeout(() => setCopySuccess(false), 2000)
        } catch (err) {
            console.error("Copy failed:", err)
        }
    }, [apiResults, editedScript])

    const downloadScript = useCallback(() => {
        if (!apiResults) return

        let content = ""
        if (typeof apiResults === "string") {
            content = editedScript || apiResults
        } else {
            content = JSON.stringify(apiResults, null, 2)
        }

        const blob = new Blob([content], { type: "text/plain" })
        const url = URL.createObjectURL(blob)
        const a = document.createElement("a")
        a.href = url
        a.download = `script-${Date.now()}.txt`
        document.body.appendChild(a)
        a.click()
        document.body.removeChild(a)
        URL.revokeObjectURL(url)
    }, [apiResults, editedScript])

    const handleNext = () => {
        if (currentStep === 3) {
            setCurrentStep(3.5 as any)
        } else if (currentStep < 4 && currentStep !== (3.5 as any)) {
            startTransition(() => setCurrentStep(currentStep + 1))
        }
    }

    const handleBack = () => {
        if (currentStep === (3.5 as any)) {
            setCurrentStep(3)
            setChatMessages([])
            setSkipRefinement(false)
        } else if (currentStep > 1) {
            startTransition(() => setCurrentStep(currentStep - 1))
        }
    }

    const handleStyleSelect = (styleId: string) => {
        startTransition(() => setSelectedStyle(styleId))
    }

    const canProceed = () => {
        if (currentStep === 1)
            return (
                selectedStyle !== "" &&
                (selectedStyle !== "other" || customStyleName.trim() !== "")
            )
        if (currentStep === 2) return keyword.trim() !== ""
        if (currentStep === 3)
            return selectedTone !== "Select" && selectedLanguage !== "Select"
        if (currentStep === (3.5 as any)) return false
        return true
    }

    const ScoreDisplay = ({ scores }: { scores: typeof scoreData }) => {
        if (!scores) return null

        const getScoreColor = (score: number) => {
            if (score >= 80) return "#10b981"
            if (score >= 60) return "#f59e0b"
            return "#ef4444"
        }

        const getScoreGradient = (score: number) => {
            if (score >= 80)
                return "linear-gradient(135deg, #10b981 0%, #34d399 100%)"
            if (score >= 60)
                return "linear-gradient(135deg, #f59e0b 0%, #fbbf24 100%)"
            return "linear-gradient(135deg, #ef4444 0%, #f87171 100%)"
        }

        const getScoreLabel = (score: number) => {
            if (score >= 90) return "Excellent"
            if (score >= 80) return "Great"
            if (score >= 70) return "Good"
            if (score >= 60) return "Fair"
            return "Needs Work"
        }

        return (
            <motion.div
                initial={{ opacity: 0, y: -10 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.3, ease: "easeOut" }}
                style={{
                    padding: "20px",
                    background: `linear-gradient(135deg, ${cardColor} 0%, ${backgroundColor} 100%)`,
                    borderRadius: "16px",
                    border: `1px solid ${accentColor}`,
                    marginBottom: "16px",
                    position: "relative",
                    overflow: "hidden",
                }}
                role="region"
                aria-label="Script Quality Scores"
            >
                <div
                    style={{
                        position: "absolute",
                        top: 0,
                        left: 0,
                        right: 0,
                        height: "80px",
                        background: getScoreGradient(scores.overall),
                        opacity: 0.1,
                        filter: "blur(40px)",
                    }}
                    aria-hidden="true"
                />

                <div
                    style={{
                        display: "flex",
                        alignItems: "center",
                        justifyContent: "space-between",
                        marginBottom: "20px",
                        position: "relative",
                    }}
                >
                    <div>
                        <div
                            style={{
                                ...bodyFont,
                                fontSize: "12px",
                                color: textColor,
                                opacity: 0.6,
                                textTransform: "uppercase",
                                letterSpacing: "0.05em",
                                marginBottom: "4px",
                            }}
                        >
                            Script Quality Analysis
                        </div>
                        <div
                            style={{
                                ...headingFont,
                                fontSize: "20px",
                                color: textColor,
                                display: "flex",
                                alignItems: "center",
                                gap: "8px",
                            }}
                        >
                            <span
                                style={{
                                    padding: "2px 8px",
                                    borderRadius: "6px",
                                    background: getScoreGradient(
                                        scores.overall
                                    ),
                                    color: "#ffffff",
                                    fontSize: "14px",
                                    fontWeight: "bold",
                                }}
                            >
                                {getScoreLabel(scores.overall)}
                            </span>
                        </div>
                    </div>
                    <div
                        style={{
                            textAlign: "center",
                        }}
                    >
                        <motion.div
                            initial={{ scale: 0 }}
                            animate={{ scale: 1 }}
                            transition={{ duration: 0.5, type: "spring" }}
                            style={{
                                ...headingFont,
                                fontSize: "42px",
                                fontWeight: "bold",
                                background: getScoreGradient(scores.overall),
                                WebkitBackgroundClip: "text",
                                WebkitTextFillColor: "transparent",
                                lineHeight: 1,
                            }}
                            aria-label={`Overall score: ${scores.overall} out of 100`}
                        >
                            {scores.overall}
                        </motion.div>
                        <div
                            style={{
                                ...bodyFont,
                                fontSize: "11px",
                                color: textColor,
                                opacity: 0.5,
                                marginTop: "2px",
                            }}
                        >
                            out of 100
                        </div>
                    </div>
                </div>

                <div
                    style={{
                        display: "grid",
                        gridTemplateColumns: "repeat(2, 1fr)",
                        gap: "16px",
                    }}
                >
                    {[
                        {
                            label: "Creativity",
                            value: scores.creativity,
                            desc: "Word diversity",
                        },
                        {
                            label: "Engagement",
                            value: scores.engagement,
                            desc: "Hook strength",
                        },
                        {
                            label: "Clarity",
                            value: scores.clarity,
                            desc: "Readability",
                        },
                        {
                            label: "Timing",
                            value: scores.timing,
                            desc: "Length match",
                        },
                    ].map((item, index) => (
                        <motion.div
                            key={item.label}
                            initial={{ opacity: 0, x: -10 }}
                            animate={{ opacity: 1, x: 0 }}
                            transition={{ duration: 0.3, delay: index * 0.05 }}
                            style={{
                                padding: "12px",
                                backgroundColor: backgroundColor,
                                borderRadius: "10px",
                                border: `1px solid ${accentColor}`,
                            }}
                        >
                            <div
                                style={{
                                    display: "flex",
                                    alignItems: "center",
                                    justifyContent: "space-between",
                                    marginBottom: "8px",
                                }}
                            >
                                <div>
                                    <div
                                        style={{
                                            ...bodyFont,
                                            fontSize: "13px",
                                            color: textColor,
                                            fontWeight: 600,
                                        }}
                                    >
                                        {item.label}
                                    </div>
                                    <div
                                        style={{
                                            ...bodyFont,
                                            fontSize: "10px",
                                            color: textColor,
                                            opacity: 0.5,
                                        }}
                                    >
                                        {item.desc}
                                    </div>
                                </div>
                                <div
                                    style={{
                                        ...bodyFont,
                                        fontSize: "16px",
                                        fontWeight: "bold",
                                        color: getScoreColor(item.value),
                                    }}
                                    aria-label={`${item.label}: ${item.value} out of 100`}
                                >
                                    {item.value}
                                </div>
                            </div>
                            <div
                                style={{
                                    height: "3px",
                                    backgroundColor: accentColor,
                                    borderRadius: "1.5px",
                                    overflow: "hidden",
                                    position: "relative",
                                }}
                                role="progressbar"
                                aria-valuenow={item.value}
                                aria-valuemin={0}
                                aria-valuemax={100}
                            >
                                <motion.div
                                    initial={{ width: 0 }}
                                    animate={{ width: `${item.value}%` }}
                                    transition={{
                                        duration: 0.8,
                                        delay: 0.2 + index * 0.1,
                                        ease: "easeOut",
                                    }}
                                    style={{
                                        height: "100%",
                                        background: getScoreGradient(
                                            item.value
                                        ),
                                        boxShadow: `0 0 10px ${getScoreColor(item.value)}40`,
                                    }}
                                />
                            </div>
                        </motion.div>
                    ))}
                </div>

                {scores.overall < 70 && (
                    <motion.div
                        initial={{ opacity: 0, height: 0 }}
                        animate={{ opacity: 1, height: "auto" }}
                        transition={{ duration: 0.3, delay: 0.5 }}
                        style={{
                            marginTop: "16px",
                            padding: "12px",
                            backgroundColor: `${primaryColor}10`,
                            borderRadius: "8px",
                            border: `1px solid ${primaryColor}30`,
                        }}
                        role="note"
                    >
                        <div
                            style={{
                                ...bodyFont,
                                fontSize: "12px",
                                color: primaryColor,
                                lineHeight: 1.5,
                            }}
                        >
                            <strong>Tip:</strong>{" "}
                            {scores.timing < 60
                                ? "Adjust the script length to better match your target duration."
                                : scores.clarity < 60
                                  ? "Try using shorter sentences for better clarity."
                                  : scores.engagement < 60
                                    ? "Add questions or CTAs to boost engagement."
                                    : "Consider adding more variety to your word choice."}
                        </div>
                    </motion.div>
                )}
            </motion.div>
        )
    }

    const EnhancedScriptDisplay = ({
        script,
        transitions,
        bRoll,
        textColor,
        primaryColor,
        backgroundColor,
        bodyFont,
        hoveredPopup,
        setHoveredPopup,
    }: any) => {
        const [hoverTimeout, setHoverTimeout] = useState<NodeJS.Timeout | null>(
            null
        )

        useEffect(() => {
            return () => {
                if (hoverTimeout) {
                    clearTimeout(hoverTimeout)
                }
            }
        }, [hoverTimeout])

        const parseScriptLine = (line: string) => {
            const timestampMatch = line.match(/^\[(\d+\.?\d*)-(\d+\.?\d*)\]/)
            if (timestampMatch) {
                return {
                    start: parseFloat(timestampMatch[1]),
                    end: parseFloat(timestampMatch[2]),
                    timestamp: timestampMatch[0],
                    text: line.substring(timestampMatch[0].length).trim(),
                }
            }
            return null
        }

        const findAnnotations = (start: number, end: number) => {
            const annotations: any[] = []

            const transition = transitions.find((t: any) => {
                const transitionTime = parseFloat(t.time.replace("s", ""))
                return Math.abs(transitionTime - start) < 0.1
            })
            if (transition) {
                annotations.push({ type: "transition", data: transition })
            }

            const bRollItem = bRoll.find((b: any) => {
                const [bStart, bEnd] = b.timeRange
                    .replace("s", "")
                    .split("-")
                    .map((t: string) => parseFloat(t))
                return start >= bStart && start <= bEnd
            })
            if (bRollItem) {
                annotations.push({ type: "broll", data: bRollItem })
            }

            return annotations
        }

        const handleMouseEnter = (
            e: React.MouseEvent,
            type: string,
            content: any
        ) => {
            if (hoverTimeout) {
                clearTimeout(hoverTimeout)
                setHoverTimeout(null)
            }

            const rect = e.currentTarget.getBoundingClientRect()
            const container = e.currentTarget.closest(".script-container")
            const containerRect = container?.getBoundingClientRect()

            if (containerRect) {
                setHoveredPopup({
                    type,
                    content,
                    x: rect.left + rect.width / 2 - containerRect.left,
                    y: rect.top - containerRect.top - 10,
                })
            }
        }

        const handleMouseLeave = () => {
            if (hoverTimeout) {
                clearTimeout(hoverTimeout)
            }

            const timeout = setTimeout(() => {
                setHoveredPopup(null)
            }, 200)
            setHoverTimeout(timeout)
        }

        const handlePopupMouseEnter = () => {
            if (hoverTimeout) {
                clearTimeout(hoverTimeout)
                setHoverTimeout(null)
            }
        }

        const handlePopupMouseLeave = () => {
            setHoveredPopup(null)
        }

        const renderAnnotationIcon = (
            type: string,
            content: any,
            index: number
        ) => {
            const iconStyle = {
                display: "inline-flex",
                alignItems: "center",
                justifyContent: "center",
                width: "20px",
                height: "20px",
                borderRadius: "50%",
                marginLeft: "6px",
                marginRight: "6px",
                cursor: "pointer",
                fontSize: "11px",
                fontWeight: "bold" as const,
                transition: "all 0.2s ease",
                transform: "scale(1)",
                zIndex: 10,
            }

            if (type === "transition") {
                return (
                    <span
                        key={`transition-${index}`}
                        style={{
                            ...iconStyle,
                            backgroundColor: "#3b82f6",
                            color: "white",
                            border: "2px solid #1e40af",
                        }}
                        onMouseEnter={(e) => {
                            e.currentTarget.style.transform = "scale(1.15)"
                            handleMouseEnter(e, type, content)
                        }}
                        onMouseLeave={(e) => {
                            e.currentTarget.style.transform = "scale(1)"
                            handleMouseLeave()
                        }}
                        title="Transition"
                        role="button"
                        tabIndex={0}
                        aria-label={`Transition at ${content.time}`}
                    >
                        T
                    </span>
                )
            } else if (type === "broll") {
                return (
                    <span
                        key={`broll-${index}`}
                        style={{
                            ...iconStyle,
                            backgroundColor: "#10b981",
                            color: "white",
                            border: "2px solid #047857",
                        }}
                        onMouseEnter={(e) => {
                            e.currentTarget.style.transform = "scale(1.15)"
                            handleMouseEnter(e, type, content)
                        }}
                        onMouseLeave={(e) => {
                            e.currentTarget.style.transform = "scale(1)"
                            handleMouseLeave()
                        }}
                        title="B-Roll"
                        role="button"
                        tabIndex={0}
                        aria-label={`B-Roll suggestion: ${content.content}`}
                    >
                        B
                    </span>
                )
            }
            return null
        }

        const scriptLines = script
            .split("\n")
            .filter((line: string) => line.trim())

        return (
            <div className="script-container" style={{ position: "relative" }}>
                {scriptLines.map((line: string, lineIndex: number) => {
                    const parsed = parseScriptLine(line)
                    if (!parsed) return <div key={lineIndex}>{line}</div>

                    const annotations = findAnnotations(
                        parsed.start,
                        parsed.end
                    )

                    return (
                        <div
                            key={lineIndex}
                            style={{
                                marginBottom: "14px",
                                display: "flex",
                                alignItems: "flex-start",
                                lineHeight: "1.7",
                            }}
                        >
                            <span
                                style={{
                                    color: primaryColor,
                                    fontWeight: "bold",
                                    marginRight: "10px",
                                    minWidth: "fit-content",
                                    fontSize: "13px",
                                }}
                            >
                                {parsed.timestamp}
                            </span>

                            {annotations.length > 0 && (
                                <span
                                    style={{
                                        display: "flex",
                                        alignItems: "center",
                                        marginRight: "10px",
                                    }}
                                >
                                    {annotations.map((annotation, annIndex) =>
                                        renderAnnotationIcon(
                                            annotation.type,
                                            annotation.data,
                                            annIndex
                                        )
                                    )}
                                </span>
                            )}

                            <span
                                style={{
                                    flex: 1,
                                    whiteSpace: "pre-wrap",
                                }}
                            >
                                {parsed.text}
                            </span>
                        </div>
                    )
                })}

                <AnimatePresence>
                    {hoveredPopup && (
                        <motion.div
                            initial={{ opacity: 0, scale: 0.9, y: 10 }}
                            animate={{ opacity: 1, scale: 1, y: 0 }}
                            exit={{ opacity: 0, scale: 0.9, y: 10 }}
                            transition={{ duration: 0.15 }}
                            style={{
                                position: "absolute",
                                left: hoveredPopup.x,
                                top: hoveredPopup.y,
                                transform: "translateX(-50%) translateY(-100%)",
                                backgroundColor: backgroundColor,
                                border: `2px solid ${primaryColor}`,
                                borderRadius: "12px",
                                padding: "16px",
                                maxWidth: "300px",
                                zIndex: 1000,
                                boxShadow: "0 12px 32px rgba(0,0,0,0.5)",
                                pointerEvents: "auto",
                                ...bodyFont,
                                fontSize: "13px",
                                color: textColor,
                            }}
                            onMouseEnter={handlePopupMouseEnter}
                            onMouseLeave={handlePopupMouseLeave}
                            role="tooltip"
                        >
                            <div
                                style={{
                                    position: "absolute",
                                    bottom: "-8px",
                                    left: "50%",
                                    transform: "translateX(-50%)",
                                    width: "0",
                                    height: "0",
                                    borderLeft: "8px solid transparent",
                                    borderRight: "8px solid transparent",
                                    borderTop: `8px solid ${primaryColor}`,
                                }}
                                aria-hidden="true"
                            />

                            {hoveredPopup.type === "transition" && (
                                <div>
                                    <div
                                        style={{
                                            color: "#3b82f6",
                                            fontWeight: "bold",
                                            marginBottom: "8px",
                                            fontSize: "14px",
                                        }}
                                    >
                                        Transition - {hoveredPopup.content.time}
                                    </div>
                                    <div
                                        style={{
                                            fontWeight: "bold",
                                            marginBottom: "4px",
                                            fontSize: "13px",
                                        }}
                                    >
                                        {hoveredPopup.content.type}
                                    </div>
                                    <div
                                        style={{
                                            opacity: 0.9,
                                            lineHeight: "1.4",
                                        }}
                                    >
                                        {hoveredPopup.content.description}
                                    </div>
                                </div>
                            )}
                            {hoveredPopup.type === "broll" && (
                                <div>
                                    <div
                                        style={{
                                            color: "#10b981",
                                            fontWeight: "bold",
                                            marginBottom: "8px",
                                            fontSize: "14px",
                                        }}
                                    >
                                        B-Roll -{" "}
                                        {hoveredPopup.content.timeRange}
                                    </div>
                                    <div
                                        style={{
                                            opacity: 0.9,
                                            lineHeight: "1.4",
                                        }}
                                    >
                                        {hoveredPopup.content.content}
                                    </div>
                                </div>
                            )}
                        </motion.div>
                    )}
                </AnimatePresence>
            </div>
        )
    }

    const handleKeyDown = useCallback(
        (e: KeyboardEvent) => {
            if (showDetails || showSkipConfirm) return

            const activeElement = document.activeElement as HTMLElement | null
            const isInputFocused =
                !!activeElement &&
                ["INPUT", "SELECT", "TEXTAREA"].includes(activeElement.tagName)

            if (!isExpanded && e.key === "Enter") {
                e.preventDefault()
                setIsExpanded(true)
                return
            }

            if (e.key === "Enter") {
                if (currentStep === 1 && canProceed()) {
                    e.preventDefault()
                    handleNext()
                } else if (
                    currentStep > 1 &&
                    isInputFocused &&
                    canProceed() &&
                    currentStep < 4
                ) {
                    e.preventDefault()
                    handleNext()
                }
            } else if (
                e.key === "Tab" &&
                (e as any).shiftKey &&
                currentStep > 1
            ) {
                const focusables = document.querySelectorAll(
                    'input, select, textarea, button, [tabindex]:not([tabindex="-1"])'
                )
                const first = focusables[0]
                if (!isInputFocused || activeElement === first) {
                    e.preventDefault()
                    handleBack()
                }
            } else if (e.key === "Escape") {
                if (isEditMode) {
                    setIsEditMode(false)
                    setEditedScript("")
                    setRegenerateRequest("")
                } else if (showSkipConfirm) {
                    setShowSkipConfirm(false)
                }
            }
        },
        [showDetails, showSkipConfirm, isExpanded, currentStep, isEditMode]
    )

    useEffect(() => {
        if (!isStatic && typeof window !== "undefined") {
            document.addEventListener("keydown", handleKeyDown)
            return () => document.removeEventListener("keydown", handleKeyDown)
        }
    }, [handleKeyDown, isStatic])

    const handleExpand = () => startTransition(() => setIsExpanded(true))

    const handleCollapse = () => {
        if (hasUnsavedChanges || currentStep > 1) {
            const confirmClose = window.confirm(
                "You have unsaved progress. Are you sure you want to close?"
            )
            if (!confirmClose) return
        }

        startTransition(() => {
            setIsExpanded(false)
            setCurrentStep(1)
            setSelectedStyle("")
            setCustomStyleName("")
            setBroadTopic("")
            setKeyword("")
            setScriptLength(45)
            setSelectedLanguage("Select")
            setSelectedTone("Select")
            setCtaInclusion(false)
            setOutputType("script")
            setShowDetails(false)
            setApiResults(null)
            setIsLoading(false)
            setApiError(null)
            setCopySuccess(false)
            setHoveredPopup(null)
            setScoreData(null)
            setIsEditMode(false)
            setEditedScript("")
            setRegenerateRequest("")
            setChatMessages([])
            setSkipRefinement(false)
            setHasUnsavedChanges(false)
            setLoadingProgress(0)
            setRetryCount(0)

            try {
                sessionStorage.removeItem("ideaGenerator_state")
            } catch (e) {
                console.warn("Failed to clear state:", e)
            }
        })
    }

    const renderResults = () => {
        if (isEditMode) {
            const currentScript =
                typeof apiResults === "string"
                    ? apiResults
                    : apiResults?.script || ""
            return (
                <motion.div
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    transition={{ duration: 0.3 }}
                    style={{
                        display: "flex",
                        flexDirection: "column",
                        gap: "16px",
                        minHeight: "600px",
                        height: "100%",
                    }}
                >
                    <div
                        style={{
                            display: "flex",
                            alignItems: "center",
                            justifyContent: "space-between",
                            padding: "14px 18px",
                            background: `linear-gradient(135deg, ${primaryColor}18 0%, ${primaryColor}08 100%)`,
                            borderRadius: "12px",
                            border: `1.5px solid ${primaryColor}25`,
                        }}
                    >
                        <div
                            style={{
                                display: "flex",
                                alignItems: "center",
                                gap: "10px",
                            }}
                        >
                            <div
                                style={{
                                    width: "8px",
                                    height: "8px",
                                    borderRadius: "50%",
                                    backgroundColor: primaryColor,
                                }}
                                aria-hidden="true"
                            />
                            <div>
                                <div
                                    style={{
                                        ...bodyFont,
                                        color: primaryColor,
                                        fontWeight: 700,
                                        fontSize: "15px",
                                    }}
                                >
                                    Editing Mode
                                </div>
                                <div
                                    style={{
                                        ...bodyFont,
                                        color: textColor,
                                        fontSize: "12px",
                                        opacity: 0.6,
                                    }}
                                >
                                    Modify script and request AI changes
                                </div>
                            </div>
                        </div>
                        <div
                            style={{
                                display: "flex",
                                alignItems: "center",
                                gap: "8px",
                            }}
                        >
                            <motion.div
                                animate={{ opacity: [1, 0.4, 1] }}
                                transition={{ duration: 2, repeat: Infinity }}
                                style={{
                                    width: "7px",
                                    height: "7px",
                                    borderRadius: "50%",
                                    backgroundColor: "#10b981",
                                }}
                                aria-hidden="true"
                            />
                            <div
                                style={{
                                    ...bodyFont,
                                    fontSize: "12px",
                                    color: textColor,
                                    opacity: 0.6,
                                }}
                            >
                                AI Ready
                            </div>
                        </div>
                    </div>

                    <div
                        style={{
                            flex: "1 1 auto",
                            minHeight: "250px",
                            height: "350px",
                            position: "relative",
                            overflow: "hidden",
                            borderRadius: "12px",
                            border: `1.5px solid ${accentColor}`,
                            background: backgroundColor,
                            display: "flex",
                            flexDirection: "column",
                        }}
                    >
                        <div
                            style={{
                                position: "absolute",
                                top: "10px",
                                right: "10px",
                                padding: "5px 10px",
                                backgroundColor: `${primaryColor}12`,
                                borderRadius: "6px",
                                zIndex: 10,
                            }}
                        >
                            <div
                                style={{
                                    ...bodyFont,
                                    fontSize: "11px",
                                    color: primaryColor,
                                    opacity: 0.8,
                                    fontWeight: 600,
                                }}
                            >
                                {
                                    (editedScript || currentScript).split(" ")
                                        .length
                                }{" "}
                                words
                            </div>
                        </div>
                        <textarea
                            value={editedScript || currentScript}
                            onChange={(e) => setEditedScript(e.target.value)}
                            style={{
                                width: "100%",
                                height: "100%",
                                padding: "18px",
                                paddingTop: "40px",
                                backgroundColor: "transparent",
                                border: "none",
                                color: textColor,
                                ...bodyFont,
                                fontSize: "14px",
                                lineHeight: 1.7,
                                resize: "none",
                                outline: "none",
                                overflow: "auto",
                                boxSizing: "border-box",
                            }}
                            placeholder="Edit your script here..."
                            aria-label="Edit script content"
                        />
                    </div>

                    <motion.div
                        initial={{ y: 10, opacity: 0 }}
                        animate={{ y: 0, opacity: 1 }}
                        transition={{ delay: 0.1 }}
                        style={{
                            padding: "18px",
                            background: `linear-gradient(135deg, ${cardColor} 0%, ${backgroundColor} 100%)`,
                            borderRadius: "12px",
                            border: `1.5px solid ${accentColor}`,
                        }}
                    >
                        <div
                            style={{
                                display: "flex",
                                alignItems: "center",
                                gap: "10px",
                                marginBottom: "14px",
                            }}
                        >
                            <div
                                style={{
                                    width: "36px",
                                    height: "36px",
                                    borderRadius: "10px",
                                    background: `linear-gradient(135deg, ${primaryColor}22 0%, ${primaryColor}12 100%)`,
                                    display: "flex",
                                    alignItems: "center",
                                    justifyContent: "center",
                                    fontSize: "17px",
                                    fontWeight: 700,
                                    color: primaryColor,
                                }}
                                aria-hidden="true"
                            >
                                AI
                            </div>
                            <div>
                                <div
                                    style={{
                                        ...bodyFont,
                                        color: textColor,
                                        fontSize: "14px",
                                        fontWeight: 700,
                                    }}
                                >
                                    AI Enhancement Request
                                </div>
                                <div
                                    style={{
                                        ...bodyFont,
                                        color: textColor,
                                        fontSize: "12px",
                                        opacity: 0.6,
                                    }}
                                >
                                    Describe what you'd like to improve
                                </div>
                            </div>
                        </div>
                        <input
                            type="text"
                            value={regenerateRequest}
                            onChange={(e) =>
                                setRegenerateRequest(e.target.value)
                            }
                            onKeyDown={(e) => {
                                if (
                                    e.key === "Enter" &&
                                    regenerateRequest.trim()
                                ) {
                                    regenerateWithEdit()
                                }
                            }}
                            placeholder="e.g., Make it more engaging, Add humor, Shorten by 30%..."
                            style={{
                                width: "100%",
                                padding: "13px 16px",
                                backgroundColor: backgroundColor,
                                border: `1.5px solid ${regenerateRequest ? primaryColor : accentColor}`,
                                borderRadius: "10px",
                                color: textColor,
                                ...bodyFont,
                                fontSize: "14px",
                                outline: "none",
                                transition: "all 0.2s ease",
                            }}
                            onFocus={(e) => {
                                e.target.style.borderColor = primaryColor
                                e.target.style.boxShadow = `0 0 0 3px ${primaryColor}18`
                            }}
                            onBlur={(e) => {
                                e.target.style.borderColor = regenerateRequest
                                    ? primaryColor
                                    : accentColor
                                e.target.style.boxShadow = "none"
                            }}
                            aria-label="AI enhancement request input"
                        />

                        <div
                            style={{
                                display: "flex",
                                gap: "8px",
                                marginTop: "10px",
                                flexWrap: "wrap",
                            }}
                        >
                            {[
                                "Make funnier",
                                "More professional",
                                "Shorter",
                                "Add hook",
                                "More engaging",
                            ].map((suggestion) => (
                                <motion.button
                                    key={suggestion}
                                    whileHover={{ scale: 1.03 }}
                                    whileTap={{ scale: 0.97 }}
                                    onClick={() =>
                                        setRegenerateRequest(suggestion)
                                    }
                                    style={{
                                        padding: "6px 10px",
                                        backgroundColor: cardColor,
                                        border: `1.5px solid ${primaryColor}35`,
                                        borderRadius: "8px",
                                        color: textColor,
                                        ...bodyFont,
                                        fontSize: "12px",
                                        cursor: "pointer",
                                        transition: "all 0.15s ease",
                                        fontWeight: 500,
                                    }}
                                    onMouseEnter={(e) => {
                                        e.currentTarget.style.backgroundColor = `${primaryColor}20`
                                        e.currentTarget.style.borderColor =
                                            primaryColor
                                    }}
                                    onMouseLeave={(e) => {
                                        e.currentTarget.style.backgroundColor =
                                            cardColor
                                        e.currentTarget.style.borderColor = `${primaryColor}35`
                                    }}
                                    aria-label={`Quick suggestion: ${suggestion}`}
                                >
                                    {suggestion}
                                </motion.button>
                            ))}
                        </div>
                    </motion.div>

                    <div
                        style={{
                            display: "flex",
                            gap: "12px",
                        }}
                    >
                        <motion.button
                            whileHover={{ scale: 1.02 }}
                            whileTap={{ scale: 0.98 }}
                            onClick={() => {
                                setIsEditMode(false)
                                setEditedScript("")
                                setRegenerateRequest("")
                            }}
                            style={{
                                flex: 1,
                                padding: "13px",
                                backgroundColor: cardColor,
                                border: `1.5px solid ${textColor}50`,
                                borderRadius: "11px",
                                color: textColor,
                                cursor: "pointer",
                                ...bodyFont,
                                fontSize: "14px",
                                fontWeight: 600,
                                transition: "all 0.2s ease",
                            }}
                            onMouseEnter={(e) => {
                                e.currentTarget.style.borderColor = `${textColor}90`
                                e.currentTarget.style.backgroundColor = `${textColor}12`
                            }}
                            onMouseLeave={(e) => {
                                e.currentTarget.style.borderColor = `${textColor}50`
                                e.currentTarget.style.backgroundColor =
                                    cardColor
                            }}
                            aria-label="Cancel editing"
                        >
                            Cancel
                        </motion.button>
                        <motion.button
                            whileHover={{
                                scale: regenerateRequest.trim() ? 1.02 : 1,
                            }}
                            whileTap={{
                                scale: regenerateRequest.trim() ? 0.98 : 1,
                            }}
                            onClick={regenerateWithEdit}
                            disabled={!regenerateRequest.trim()}
                            style={{
                                flex: 2,
                                padding: "13px",
                                background: regenerateRequest.trim()
                                    ? `linear-gradient(135deg, ${primaryColor} 0%, ${primaryColor}dd 100%)`
                                    : cardColor,
                                border: regenerateRequest.trim()
                                    ? `1.5px solid ${primaryColor}`
                                    : `1.5px solid ${textColor}25`,
                                borderRadius: "11px",
                                color: regenerateRequest.trim()
                                    ? "#000000"
                                    : `${textColor}50`,
                                cursor: regenerateRequest.trim()
                                    ? "pointer"
                                    : "not-allowed",
                                ...bodyFont,
                                fontSize: "14px",
                                fontWeight: 700,
                                transition: "all 0.2s ease",
                                display: "flex",
                                alignItems: "center",
                                justifyContent: "center",
                                gap: "8px",
                                boxShadow: regenerateRequest.trim()
                                    ? `0 4px 16px ${primaryColor}35`
                                    : "none",
                            }}
                            aria-label="Regenerate script with AI enhancements"
                        >
                            Regenerate with AI
                        </motion.button>
                    </div>
                </motion.div>
            )
        }

        if (typeof apiResults === "string") {
            return (
                <div
                    style={{
                        whiteSpace: "pre-wrap",
                        ...bodyFont,
                        color: textColor,
                        lineHeight: 1.7,
                        fontSize: "15px",
                        opacity: 0.95,
                    }}
                >
                    {apiResults}
                </div>
            )
        } else if (apiResults && typeof apiResults === "object") {
            return (
                <div
                    style={{
                        display: "flex",
                        flexDirection: "column",
                        gap: "18px",
                    }}
                >
                    <div>
                        <div
                            style={{
                                ...bodyFont,
                                color: primaryColor,
                                fontWeight: 700,
                                marginBottom: "10px",
                                fontSize: "17px",
                            }}
                        >
                            Script
                        </div>
                        <div
                            style={{
                                padding: "16px",
                                backgroundColor: accentColor,
                                borderRadius: "10px",
                                ...bodyFont,
                                color: textColor,
                                fontSize: "14px",
                                lineHeight: 1.6,
                                position: "relative",
                            }}
                        >
                            <EnhancedScriptDisplay
                                script={apiResults.script}
                                transitions={apiResults.transitions || []}
                                bRoll={apiResults.bRoll || []}
                                textColor={textColor}
                                primaryColor={primaryColor}
                                backgroundColor={backgroundColor}
                                bodyFont={bodyFont}
                                hoveredPopup={hoveredPopup}
                                setHoveredPopup={setHoveredPopup}
                            />
                        </div>
                    </div>

                    {apiResults.textOverlays &&
                        apiResults.textOverlays.length > 0 && (
                            <div>
                                <div
                                    style={{
                                        ...bodyFont,
                                        color: primaryColor,
                                        fontWeight: 700,
                                        marginBottom: "10px",
                                        fontSize: "17px",
                                    }}
                                >
                                    Text Overlays
                                </div>
                                <div
                                    style={{
                                        display: "flex",
                                        flexDirection: "column",
                                        gap: "8px",
                                    }}
                                >
                                    {apiResults.textOverlays.map(
                                        (overlay: any, i: number) => (
                                            <div
                                                key={i}
                                                style={{
                                                    padding: "10px 14px",
                                                    backgroundColor:
                                                        accentColor,
                                                    borderRadius: "8px",
                                                    ...bodyFont,
                                                    color: textColor,
                                                    fontSize: "13px",
                                                }}
                                            >
                                                <span
                                                    style={{
                                                        color: primaryColor,
                                                        fontWeight: 700,
                                                    }}
                                                >
                                                    {overlay.time}
                                                </span>{" "}
                                                - "{overlay.text}" (
                                                {overlay.style})
                                            </div>
                                        )
                                    )}
                                </div>
                            </div>
                        )}

                    {apiResults.soundEffects &&
                        apiResults.soundEffects.length > 0 && (
                            <div>
                                <div
                                    style={{
                                        ...bodyFont,
                                        color: primaryColor,
                                        fontWeight: 700,
                                        marginBottom: "10px",
                                        fontSize: "17px",
                                    }}
                                >
                                    Sound Effects
                                </div>
                                <div
                                    style={{
                                        display: "flex",
                                        flexDirection: "column",
                                        gap: "8px",
                                    }}
                                >
                                    {apiResults.soundEffects.map(
                                        (sound: any, i: number) => (
                                            <div
                                                key={i}
                                                style={{
                                                    padding: "10px 14px",
                                                    backgroundColor:
                                                        accentColor,
                                                    borderRadius: "8px",
                                                    ...bodyFont,
                                                    color: textColor,
                                                    fontSize: "13px",
                                                }}
                                            >
                                                <span
                                                    style={{
                                                        color: primaryColor,
                                                        fontWeight: 700,
                                                    }}
                                                >
                                                    {sound.time}
                                                </span>{" "}
                                                - {sound.effect}
                                            </div>
                                        )
                                    )}
                                </div>
                            </div>
                        )}
                </div>
            )
        }
        return null
    }

    const getContainerHeight = () => {
        if (!isExpanded) return "64px"
        if (currentStep === (3.5 as any)) return "920px"

        if (currentStep === 4) {
            if (isEditMode) return "850px"
            if (!apiResults) return "760px"

            let baseHeight = 760
            if (scoreData) baseHeight += 200
            if (apiResults && typeof apiResults === "object") {
                const hasExtras =
                    apiResults.transitions?.length ||
                    apiResults.bRoll?.length ||
                    apiResults.textOverlays?.length ||
                    apiResults.soundEffects?.length
                if (hasExtras) baseHeight += 100
            }
            return `${Math.min(baseHeight, window.innerHeight * 0.95)}px`
        }

        return "820px"
    }

    if (isStatic) {
        return (
            <div
                style={{
                    width: "600px",
                    height: "820px",
                    backgroundColor,
                    padding: "20px",
                    borderRadius: "14px",
                    boxShadow: "0 8px 32px rgba(0,0,0,0.12)",
                    position: "relative",
                    overflow: "hidden",
                    display: "flex",
                    flexDirection: "column",
                    visibility: preview ? "visible" : "hidden",
                }}
            >
                <div style={{ marginBottom: "20px" }}>
                    <div
                        style={{
                            display: "flex",
                            justifyContent: "space-between",
                            marginBottom: "8px",
                        }}
                    >
                        {[1, 2, 3, 4].map((step) => (
                            <div
                                key={step}
                                style={{
                                    width: "25%",
                                    height: "5px",
                                    backgroundColor:
                                        step === 1 ? primaryColor : "#E5E5E5",
                                    borderRadius: "2.5px",
                                }}
                            />
                        ))}
                    </div>
                    <div
                        style={{
                            ...bodyFont,
                            color: textColor,
                            opacity: 0.7,
                            fontSize: "16px",
                        }}
                    >
                        Step 1 of 4
                    </div>
                </div>

                <div style={{ flex: 1 }}>
                    <div
                        style={{
                            ...headingFont,
                            color: textColor,
                            marginBottom: "12px",
                            fontSize: "26px",
                        }}
                    >
                        Choose Your Video Style
                    </div>
                    <div
                        style={{
                            ...bodyFont,
                            color: textColor,
                            opacity: 0.7,
                            marginBottom: "16px",
                            fontSize: "16px",
                        }}
                    >
                        Select the type of video content you want to create
                    </div>
                    <div
                        style={{
                            display: "grid",
                            gridTemplateColumns:
                                "repeat(auto-fit, minmax(200px, 1fr))",
                            gap: "12px",
                        }}
                    >
                        {videoStyles.map((style, i) => (
                            <div
                                key={style.id}
                                style={{
                                    padding: "16px",
                                    backgroundColor:
                                        i === 0 ? accentColor : cardColor,
                                    border:
                                        i === 0
                                            ? `2px solid ${primaryColor}`
                                            : "2px solid transparent",
                                    borderRadius: "10px",
                                    gridColumn:
                                        style.id === "other"
                                            ? "span 2"
                                            : undefined,
                                }}
                            >
                                <div
                                    style={{
                                        ...headingFont,
                                        fontSize: "17px",
                                        color: textColor,
                                        marginBottom: "6px",
                                    }}
                                >
                                    {style.title}
                                </div>
                                <div
                                    style={{
                                        ...bodyFont,
                                        fontSize: "15px",
                                        color: textColor,
                                        opacity: 0.7,
                                    }}
                                >
                                    {style.description}
                                </div>
                            </div>
                        ))}
                    </div>
                </div>

                <div
                    style={{
                        display: "flex",
                        justifyContent: "space-between",
                        alignItems: "center",
                        marginTop: "20px",
                        paddingTop: "16px",
                        borderTop: `1px solid ${accentColor}`,
                    }}
                >
                    <button
                        style={{
                            padding: "12px 20px",
                            backgroundColor: "transparent",
                            border: `2px solid #E5E5E5`,
                            borderRadius: "10px",
                            color: "#999",
                            ...buttonFont,
                            opacity: 0.5,
                            fontSize: "15px",
                        }}
                        disabled
                    >
                        Back
                    </button>
                    <button
                        style={{
                            padding: "12px 20px",
                            backgroundColor: primaryColor,
                            border: "none",
                            borderRadius: "10px",
                            color: "#000000",
                            ...buttonFont,
                            fontSize: "15px",
                        }}
                    >
                        Next
                    </button>
                </div>
            </div>
        )
    }

    const pageVariants = {
        initial: { opacity: 0, x: 40 },
        in: { opacity: 1, x: 0 },
        out: { opacity: 0, x: -40 },
    }
    const pageTransition = { duration: 0.25, ease: "easeInOut" }

    return (
        <div
            style={{
                width: isExpanded ? "600px" : "610px",
                height: getContainerHeight(),
                backgroundColor: isExpanded ? backgroundColor : "#000000",
                borderRadius: "14px",
                boxShadow: isExpanded
                    ? "0 8px 32px rgba(0,0,0,0.15)"
                    : "0 4px 20px rgba(0,0,0,0.08)",
                position: "relative",
                overflow: "hidden",
                display: "flex",
                alignItems: isExpanded ? "stretch" : "center",
                justifyContent: "center",
                transition: "all 0.3s cubic-bezier(0.4, 0, 0.2, 1)",
            }}
            role="application"
            aria-label="AI Script Generator"
        >
            <AnimatePresence mode="wait">
                {!isExpanded ? (
                    <motion.div
                        key="step0"
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        exit={{ opacity: 0 }}
                        transition={{ duration: 0.3 }}
                        style={{
                            display: "flex",
                            alignItems: "center",
                            gap: "12px",
                            padding: "12px",
                            width: "100%",
                            justifyContent: "center",
                        }}
                    >
                        <input
                            type="text"
                            value={broadTopic}
                            onChange={(e) => setBroadTopic(e.target.value)}
                            onKeyDown={(e) => {
                                if (e.key === "Enter") handleExpand()
                            }}
                            placeholder="Enter a broad topic (e.g., fitness, cooking, tech)..."
                            style={{
                                width: "550px",
                                height: "42px",
                                padding: "0 18px",
                                backgroundColor: "#27272a",
                                border: "1.5px solid #3f3f46",
                                borderRadius: "12px",
                                color: "#ffffff",
                                ...bodyFont,
                                fontSize: "16px",
                                outline: "none",
                                transition: "all 0.2s ease",
                            }}
                            onFocus={(e) => {
                                e.target.style.borderColor = "#52525b"
                                e.target.style.boxShadow =
                                    "0 0 0 3px rgba(82,82,91,0.15)"
                            }}
                            onBlur={(e) => {
                                e.target.style.borderColor = "#3f3f46"
                                e.target.style.boxShadow = "none"
                            }}
                            aria-label="Enter video topic"
                        />
                        <motion.button
                            whileHover={{ scale: 1.05 }}
                            whileTap={{ scale: 0.95 }}
                            onClick={handleExpand}
                            style={{
                                width: "42px",
                                height: "42px",
                                borderRadius: "50%",
                                backgroundColor: "#ffffff",
                                border: "none",
                                cursor: "pointer",
                                display: "flex",
                                alignItems: "center",
                                justifyContent: "center",
                                transition: "all 0.2s ease",
                            }}
                            onMouseEnter={(e) => {
                                e.currentTarget.style.backgroundColor =
                                    "#f4f4f5"
                            }}
                            onMouseLeave={(e) => {
                                e.currentTarget.style.backgroundColor =
                                    "#ffffff"
                            }}
                            aria-label="Start script generation"
                            title="Start"
                        >
                            <svg
                                width="18"
                                height="18"
                                viewBox="0 0 24 24"
                                fill="none"
                                stroke="#27272a"
                                strokeWidth="2.5"
                                strokeLinecap="round"
                                strokeLinejoin="round"
                            >
                                <path d="M12 19V5M5 12l7-7 7 7" />
                            </svg>
                        </motion.button>
                    </motion.div>
                ) : (
                    <motion.div
                        key="generator"
                        initial={{ scale: 0.98, opacity: 0 }}
                        animate={{ scale: 1, opacity: 1 }}
                        exit={{ scale: 0.98, opacity: 0 }}
                        transition={{ duration: 0.25, ease: "easeOut" }}
                        style={{
                            width: "100%",
                            height: "100%",
                            padding: "20px",
                            display: "flex",
                            flexDirection: "column",
                            overflow: currentStep === 4 ? "auto" : "hidden",
                        }}
                    >
                        <motion.button
                            whileHover={{ scale: 1.06 }}
                            whileTap={{ scale: 0.94 }}
                            onClick={handleCollapse}
                            style={{
                                position: "absolute",
                                top: "12px",
                                right: "12px",
                                width: "30px",
                                height: "30px",
                                borderRadius: "50%",
                                backgroundColor: cardColor,
                                border: `1.5px solid ${accentColor}`,
                                cursor: "pointer",
                                display: "flex",
                                alignItems: "center",
                                justifyContent: "center",
                                zIndex: 1001,
                                transition: "all 0.2s ease",
                            }}
                            onMouseEnter={(e) => {
                                e.currentTarget.style.backgroundColor = `${textColor}15`
                            }}
                            onMouseLeave={(e) => {
                                e.currentTarget.style.backgroundColor =
                                    cardColor
                            }}
                            aria-label="Close generator"
                            title="Close"
                        >
                            <svg
                                width="14"
                                height="14"
                                viewBox="0 0 24 24"
                                fill="none"
                                stroke={textColor}
                                strokeWidth="2.5"
                                strokeLinecap="round"
                                strokeLinejoin="round"
                            >
                                <path d="M18 6L6 18M6 6l12 12" />
                            </svg>
                        </motion.button>

                        <div style={{ marginBottom: "18px" }}>
                            <div
                                style={{
                                    display: "flex",
                                    justifyContent: "space-between",
                                    marginBottom: "10px",
                                }}
                            >
                                {[1, 2, 3, 4].map((step) => (
                                    <div
                                        key={step}
                                        style={{
                                            width: "24.5%",
                                            height: "5px",
                                            backgroundColor:
                                                step <= currentStep
                                                    ? primaryColor
                                                    : "#E5E5E5",
                                            borderRadius: "2.5px",
                                            transition: "all 0.25s ease",
                                            boxShadow:
                                                step === currentStep
                                                    ? `0 0 8px ${primaryColor}45`
                                                    : "none",
                                            transform:
                                                step === currentStep
                                                    ? "scaleY(1.2)"
                                                    : "scaleY(1)",
                                        }}
                                        role="progressbar"
                                        aria-valuenow={
                                            step <= currentStep ? 100 : 0
                                        }
                                        aria-valuemin={0}
                                        aria-valuemax={100}
                                        aria-label={`Step ${step}`}
                                    />
                                ))}
                            </div>
                            <div
                                style={{
                                    display: "flex",
                                    justifyContent: "space-between",
                                    marginBottom: "10px",
                                }}
                            >
                                {[
                                    { step: 1, label: "Style" },
                                    { step: 2, label: "Topic" },
                                    { step: 3, label: "Settings" },
                                    { step: 4, label: "Results" },
                                ].map(({ step, label }) => (
                                    <div
                                        key={step}
                                        style={{
                                            width: "25%",
                                            textAlign: "center",
                                            ...bodyFont,
                                            fontSize:
                                                step === currentStep
                                                    ? "15px"
                                                    : "14px",
                                            color:
                                                step === currentStep
                                                    ? primaryColor
                                                    : step < currentStep
                                                      ? textColor
                                                      : "#999",
                                            fontWeight:
                                                step === currentStep
                                                    ? "700"
                                                    : step < currentStep
                                                      ? "600"
                                                      : "400",
                                            transition: "all 0.2s ease",
                                        }}
                                    >
                                        {label}
                                    </div>
                                ))}
                            </div>
                            <div
                                style={{
                                    ...bodyFont,
                                    color: primaryColor,
                                    opacity: 0.9,
                                    fontSize: "16px",
                                    fontWeight: 700,
                                    textAlign: "center",
                                }}
                            >
                                Step {currentStep} of 4
                            </div>
                        </div>

                        <div
                            style={{
                                flex: currentStep === 4 ? "initial" : 1,
                                position:
                                    currentStep === 4 ? "static" : "relative",
                                overflow: "hidden",
                            }}
                        >
                            <AnimatePresence mode="wait">
                                {currentStep === 1 && (
                                    <motion.div
                                        key="step1"
                                        initial="initial"
                                        animate="in"
                                        exit="out"
                                        variants={pageVariants}
                                        transition={pageTransition}
                                        style={{
                                            position: "absolute",
                                            width: "100%",
                                            height: "100%",
                                            overflow: "auto",
                                        }}
                                    >
                                        <div
                                            style={{
                                                ...headingFont,
                                                color: textColor,
                                                marginBottom: "14px",
                                                fontSize: "28px",
                                                fontWeight: 800,
                                            }}
                                        >
                                            Choose Your Video Style
                                        </div>
                                        <div
                                            style={{
                                                ...bodyFont,
                                                color: textColor,
                                                opacity: 0.75,
                                                marginBottom: "18px",
                                                fontSize: "16px",
                                            }}
                                        >
                                            Select the type of video content you
                                            want to create
                                        </div>

                                        <div
                                            style={{
                                                display: "grid",
                                                gridTemplateColumns:
                                                    "repeat(auto-fit, minmax(200px, 1fr))",
                                                gap: "14px",
                                            }}
                                            role="radiogroup"
                                            aria-label="Video style selection"
                                        >
                                            {videoStyles.map((style) => (
                                                <motion.div
                                                    key={style.id}
                                                    whileHover={{
                                                        scale: 1.02,
                                                        y: -2,
                                                    }}
                                                    whileTap={{ scale: 0.98 }}
                                                    onClick={() =>
                                                        handleStyleSelect(
                                                            style.id
                                                        )
                                                    }
                                                    style={{
                                                        padding: "18px",
                                                        backgroundColor:
                                                            selectedStyle ===
                                                            style.id
                                                                ? accentColor
                                                                : cardColor,
                                                        border:
                                                            selectedStyle ===
                                                            style.id
                                                                ? `2px solid ${primaryColor}`
                                                                : "2px solid transparent",
                                                        borderRadius: "12px",
                                                        gridColumn:
                                                            style.id === "other"
                                                                ? "span 2"
                                                                : undefined,
                                                        cursor: "pointer",
                                                        transition:
                                                            "all 0.2s ease",
                                                        boxShadow:
                                                            selectedStyle ===
                                                            style.id
                                                                ? `0 4px 16px ${primaryColor}25`
                                                                : "none",
                                                    }}
                                                    role="radio"
                                                    aria-checked={
                                                        selectedStyle ===
                                                        style.id
                                                    }
                                                    tabIndex={0}
                                                    onKeyDown={(e) => {
                                                        if (
                                                            e.key === "Enter" ||
                                                            e.key === " "
                                                        ) {
                                                            e.preventDefault()
                                                            handleStyleSelect(
                                                                style.id
                                                            )
                                                        }
                                                    }}
                                                >
                                                    <div
                                                        style={{
                                                            ...headingFont,
                                                            fontSize: "18px",
                                                            color: textColor,
                                                            marginBottom: "8px",
                                                            fontWeight: 700,
                                                        }}
                                                    >
                                                        {style.title}
                                                    </div>
                                                    <div
                                                        style={{
                                                            ...bodyFont,
                                                            fontSize: "15px",
                                                            color: textColor,
                                                            opacity: 0.75,
                                                            lineHeight: 1.4,
                                                        }}
                                                    >
                                                        {style.description}
                                                    </div>
                                                    {style.id === "other" &&
                                                        selectedStyle ===
                                                            "other" && (
                                                            <motion.input
                                                                initial={{
                                                                    opacity: 0,
                                                                    scale: 0.98,
                                                                }}
                                                                animate={{
                                                                    opacity: 1,
                                                                    scale: 1,
                                                                }}
                                                                transition={{
                                                                    duration: 0.2,
                                                                    ease: "easeOut",
                                                                }}
                                                                type="text"
                                                                value={
                                                                    customStyleName
                                                                }
                                                                onChange={(
                                                                    e
                                                                ) => {
                                                                    e.stopPropagation()
                                                                    startTransition(
                                                                        () =>
                                                                            setCustomStyleName(
                                                                                e
                                                                                    .target
                                                                                    .value
                                                                            )
                                                                    )
                                                                }}
                                                                onClick={(e) =>
                                                                    e.stopPropagation()
                                                                }
                                                                placeholder="Enter custom style name..."
                                                                style={{
                                                                    width: "100%",
                                                                    padding:
                                                                        "12px 14px",
                                                                    marginTop:
                                                                        "12px",
                                                                    border: `1.5px solid ${primaryColor}`,
                                                                    borderRadius:
                                                                        "10px",
                                                                    backgroundColor:
                                                                        backgroundColor,
                                                                    color: textColor,
                                                                    ...bodyFont,
                                                                    fontSize:
                                                                        "15px",
                                                                    outline:
                                                                        "none",
                                                                }}
                                                                aria-label="Custom style name"
                                                            />
                                                        )}
                                                </motion.div>
                                            ))}
                                        </div>
                                    </motion.div>
                                )}

                                {currentStep === 2 && (
                                    <motion.div
                                        key="step2"
                                        initial="initial"
                                        animate="in"
                                        exit="out"
                                        variants={pageVariants}
                                        transition={pageTransition}
                                        style={{
                                            position: "absolute",
                                            width: "100%",
                                            height: "100%",
                                            overflow: "auto",
                                        }}
                                    >
                                        <div
                                            style={{
                                                ...headingFont,
                                                color: textColor,
                                                marginBottom: "14px",
                                                fontSize: "28px",
                                                fontWeight: 800,
                                            }}
                                        >
                                            Describe Your Specific Idea
                                        </div>
                                        <div
                                            style={{
                                                ...bodyFont,
                                                color: textColor,
                                                opacity: 0.75,
                                                marginBottom: "18px",
                                                fontSize: "16px",
                                            }}
                                        >
                                            Describe your video idea in detail.
                                            What unique angle do you want to
                                            take?
                                        </div>

                                        <div style={{ marginBottom: "18px" }}>
                                            <div
                                                style={{
                                                    ...bodyFont,
                                                    color: textColor,
                                                    marginBottom: "8px",
                                                    fontSize: "15px",
                                                    fontWeight: 600,
                                                }}
                                            >
                                                Selected Style:{" "}
                                                <span
                                                    style={{
                                                        color: primaryColor,
                                                        fontWeight: 700,
                                                    }}
                                                >
                                                    {selectedStyle ===
                                                        "other" &&
                                                    customStyleName
                                                        ? customStyleName
                                                        : videoStyles.find(
                                                              (s) =>
                                                                  s.id ===
                                                                  selectedStyle
                                                          )?.title}
                                                </span>
                                                {broadTopic && (
                                                    <>
                                                        {" | Topic: "}
                                                        <span
                                                            style={{
                                                                color: primaryColor,
                                                                fontWeight: 700,
                                                            }}
                                                        >
                                                            {broadTopic}
                                                        </span>
                                                    </>
                                                )}
                                            </div>

                                            <input
                                                type="text"
                                                value={keyword}
                                                onChange={(e) =>
                                                    setKeyword(e.target.value)
                                                }
                                                placeholder={
                                                    broadTopic
                                                        ? `e.g., ${
                                                              broadTopic ===
                                                              "fitness"
                                                                  ? "5-minute morning workout for busy professionals"
                                                                  : broadTopic ===
                                                                      "cooking"
                                                                    ? "easy pasta recipes using only 3 ingredients"
                                                                    : broadTopic ===
                                                                        "tech"
                                                                      ? "iPhone productivity tips for college students"
                                                                      : `specific ${broadTopic} idea with unique angle`
                                                          }...`
                                                        : "e.g., 5-minute morning workout for busy professionals..."
                                                }
                                                style={{
                                                    width: "100%",
                                                    padding: "16px",
                                                    border: `2px solid ${keyword ? primaryColor : "#E5E5E5"}`,
                                                    borderRadius: "10px",
                                                    backgroundColor: cardColor,
                                                    color: textColor,
                                                    ...bodyFont,
                                                    fontSize: "17px",
                                                    outline: "none",
                                                    transition: "all 0.2s ease",
                                                    boxShadow: keyword
                                                        ? `0 0 0 3px ${primaryColor}18`
                                                        : "none",
                                                }}
                                                onFocus={(e) => {
                                                    e.target.style.borderColor =
                                                        primaryColor
                                                }}
                                                onBlur={(e) => {
                                                    e.target.style.borderColor =
                                                        keyword
                                                            ? primaryColor
                                                            : "#E5E5E5"
                                                }}
                                                aria-label="Video idea description"
                                            />
                                        </div>
                                    </motion.div>
                                )}

                                {currentStep === 3 && (
                                    <motion.div
                                        key="step3"
                                        initial="initial"
                                        animate="in"
                                        exit="out"
                                        variants={pageVariants}
                                        transition={pageTransition}
                                        style={{
                                            position: "absolute",
                                            width: "100%",
                                            height: "100%",
                                            overflow: "auto",
                                        }}
                                    >
                                        <div
                                            style={{
                                                ...headingFont,
                                                color: textColor,
                                                marginBottom: "14px",
                                                fontSize: "28px",
                                                fontWeight: 800,
                                            }}
                                        >
                                            Customize Your Script
                                        </div>
                                        <div
                                            style={{
                                                ...bodyFont,
                                                color: textColor,
                                                opacity: 0.75,
                                                marginBottom: "18px",
                                                fontSize: "16px",
                                            }}
                                        >
                                            Adjust the script length, tone, and
                                            output type
                                        </div>

                                        <div
                                            style={{
                                                display: "flex",
                                                flexDirection: "column",
                                                gap: "18px",
                                            }}
                                        >
                                            <div>
                                                <div
                                                    style={{
                                                        ...bodyFont,
                                                        color: textColor,
                                                        marginBottom: "10px",
                                                        fontSize: "15px",
                                                        fontWeight: 700,
                                                    }}
                                                >
                                                    Output Type
                                                </div>
                                                <div
                                                    style={{
                                                        display: "flex",
                                                        gap: "14px",
                                                    }}
                                                    role="radiogroup"
                                                    aria-label="Output type selection"
                                                >
                                                    <motion.div
                                                        whileHover={{
                                                            scale: 1.02,
                                                        }}
                                                        whileTap={{
                                                            scale: 0.98,
                                                        }}
                                                        onClick={() =>
                                                            setOutputType(
                                                                "script"
                                                            )
                                                        }
                                                        style={{
                                                            flex: 1,
                                                            padding:
                                                                "14px 18px",
                                                            backgroundColor:
                                                                outputType ===
                                                                "script"
                                                                    ? accentColor
                                                                    : cardColor,
                                                            border:
                                                                outputType ===
                                                                "script"
                                                                    ? `2px solid ${primaryColor}`
                                                                    : "2px solid transparent",
                                                            borderRadius:
                                                                "12px",
                                                            cursor: "pointer",
                                                            transition:
                                                                "all 0.2s ease",
                                                        }}
                                                        role="radio"
                                                        aria-checked={
                                                            outputType ===
                                                            "script"
                                                        }
                                                        tabIndex={0}
                                                        onKeyDown={(e) => {
                                                            if (
                                                                e.key ===
                                                                    "Enter" ||
                                                                e.key === " "
                                                            ) {
                                                                e.preventDefault()
                                                                setOutputType(
                                                                    "script"
                                                                )
                                                            }
                                                        }}
                                                    >
                                                        <div
                                                            style={{
                                                                ...bodyFont,
                                                                color: textColor,
                                                                fontWeight: 700,
                                                                fontSize:
                                                                    "16px",
                                                                marginBottom:
                                                                    "6px",
                                                            }}
                                                        >
                                                            Script Only
                                                        </div>
                                                        <div
                                                            style={{
                                                                ...bodyFont,
                                                                color: textColor,
                                                                opacity: 0.75,
                                                                fontSize:
                                                                    "13px",
                                                            }}
                                                        >
                                                            Just the timestamped
                                                            script
                                                        </div>
                                                    </motion.div>
                                                    <motion.div
                                                        whileHover={{
                                                            scale: 1.02,
                                                        }}
                                                        whileTap={{
                                                            scale: 0.98,
                                                        }}
                                                        onClick={() =>
                                                            setOutputType(
                                                                "complete"
                                                            )
                                                        }
                                                        style={{
                                                            flex: 1,
                                                            padding:
                                                                "14px 18px",
                                                            backgroundColor:
                                                                outputType ===
                                                                "complete"
                                                                    ? accentColor
                                                                    : cardColor,
                                                            border:
                                                                outputType ===
                                                                "complete"
                                                                    ? `2px solid ${primaryColor}`
                                                                    : "2px solid transparent",
                                                            borderRadius:
                                                                "12px",
                                                            cursor: "pointer",
                                                            transition:
                                                                "all 0.2s ease",
                                                        }}
                                                        role="radio"
                                                        aria-checked={
                                                            outputType ===
                                                            "complete"
                                                        }
                                                        tabIndex={0}
                                                        onKeyDown={(e) => {
                                                            if (
                                                                e.key ===
                                                                    "Enter" ||
                                                                e.key === " "
                                                            ) {
                                                                e.preventDefault()
                                                                setOutputType(
                                                                    "complete"
                                                                )
                                                            }
                                                        }}
                                                    >
                                                        <div
                                                            style={{
                                                                ...bodyFont,
                                                                color: textColor,
                                                                fontWeight: 700,
                                                                fontSize:
                                                                    "16px",
                                                                marginBottom:
                                                                    "6px",
                                                            }}
                                                        >
                                                            Complete Package
                                                        </div>
                                                        <div
                                                            style={{
                                                                ...bodyFont,
                                                                color: textColor,
                                                                opacity: 0.75,
                                                                fontSize:
                                                                    "13px",
                                                            }}
                                                        >
                                                            Script + transitions
                                                            + B-roll + effects
                                                        </div>
                                                    </motion.div>
                                                </div>
                                            </div>

                                            <div>
                                                <div
                                                    style={{
                                                        ...bodyFont,
                                                        color: textColor,
                                                        marginBottom: "10px",
                                                        fontSize: "15px",
                                                        fontWeight: 700,
                                                    }}
                                                >
                                                    Script Length:{" "}
                                                    {(() => {
                                                        if (scriptLength < 60) {
                                                            return `${scriptLength} seconds`
                                                        } else {
                                                            const minutes =
                                                                Math.floor(
                                                                    scriptLength /
                                                                        60
                                                                )
                                                            const seconds =
                                                                scriptLength %
                                                                60
                                                            if (seconds === 0) {
                                                                return `${minutes} minute${minutes > 1 ? "s" : ""}`
                                                            } else {
                                                                return `${minutes} minute${minutes > 1 ? "s" : ""} ${seconds} second${seconds > 1 ? "s" : ""}`
                                                            }
                                                        }
                                                    })()}
                                                </div>
                                                <input
                                                    type="range"
                                                    min="15"
                                                    max="180"
                                                    step="1"
                                                    value={scriptLength}
                                                    onChange={(e) =>
                                                        startTransition(() =>
                                                            setScriptLength(
                                                                parseInt(
                                                                    e.target
                                                                        .value
                                                                )
                                                            )
                                                        )
                                                    }
                                                    style={{
                                                        width: "100%",
                                                        height: "5px",
                                                        borderRadius: "2.5px",
                                                        background: `linear-gradient(to right, ${primaryColor} 0%, ${primaryColor} ${((scriptLength - 15) / (180 - 15)) * 100}%, ${accentColor} ${((scriptLength - 15) / (180 - 15)) * 100}%, ${accentColor} 100%)`,
                                                        outline: "none",
                                                        appearance: "none",
                                                        cursor: "pointer",
                                                    }}
                                                    aria-label={`Script length: ${scriptLength} seconds`}
                                                    aria-valuemin={15}
                                                    aria-valuemax={180}
                                                    aria-valuenow={scriptLength}
                                                />
                                                <div
                                                    style={{
                                                        ...bodyFont,
                                                        color: textColor,
                                                        opacity: 0.6,
                                                        fontSize: "14px",
                                                        marginTop: "6px",
                                                    }}
                                                >
                                                    15 seconds to 3 minutes (1
                                                    second precision)
                                                </div>
                                            </div>

                                            <div>
                                                <div
                                                    style={{
                                                        ...bodyFont,
                                                        color: textColor,
                                                        marginBottom: "10px",
                                                        fontSize: "15px",
                                                        fontWeight: 700,
                                                    }}
                                                >
                                                    Tone
                                                </div>
                                                <select
                                                    value={selectedTone}
                                                    onChange={(e) =>
                                                        startTransition(() =>
                                                            setSelectedTone(
                                                                e.target.value
                                                            )
                                                        )
                                                    }
                                                    style={{
                                                        width: "100%",
                                                        padding: "14px 16px",
                                                        border: `2px solid ${selectedTone === "Select" ? accentColor : primaryColor}`,
                                                        borderRadius: "10px",
                                                        backgroundColor:
                                                            cardColor,
                                                        color: textColor,
                                                        ...bodyFont,
                                                        fontSize: "17px",
                                                        outline: "none",
                                                        cursor: "pointer",
                                                        opacity:
                                                            selectedTone ===
                                                            "Select"
                                                                ? 0.6
                                                                : 1,
                                                        transition:
                                                            "all 0.2s ease",
                                                    }}
                                                    onFocus={(e) => {
                                                        e.currentTarget.style.borderColor =
                                                            primaryColor
                                                        e.currentTarget.style.boxShadow = `0 0 0 3px ${primaryColor}18`
                                                    }}
                                                    onBlur={(e) => {
                                                        e.currentTarget.style.borderColor =
                                                            selectedTone ===
                                                            "Select"
                                                                ? accentColor
                                                                : primaryColor
                                                        e.currentTarget.style.boxShadow =
                                                            "none"
                                                    }}
                                                    aria-label="Tone selection"
                                                >
                                                    <option
                                                        value="Select"
                                                        disabled
                                                    >
                                                        Select
                                                    </option>
                                                    <option value="Neutral">
                                                        Neutral
                                                    </option>
                                                    <option value="Casual">
                                                        Casual
                                                    </option>
                                                    <option value="Professional">
                                                        Professional
                                                    </option>
                                                    <option value="Friendly">
                                                        Friendly
                                                    </option>
                                                    <option value="Formal">
                                                        Formal
                                                    </option>
                                                    <option value="Humorous">
                                                        Humorous
                                                    </option>
                                                    <option value="Serious">
                                                        Serious
                                                    </option>
                                                    <option value="Enthusiastic">
                                                        Enthusiastic
                                                    </option>
                                                </select>
                                            </div>

                                            <div>
                                                <div
                                                    style={{
                                                        ...bodyFont,
                                                        color: textColor,
                                                        marginBottom: "10px",
                                                        fontSize: "15px",
                                                        fontWeight: 700,
                                                    }}
                                                >
                                                    Language
                                                </div>
                                                <select
                                                    value={selectedLanguage}
                                                    onChange={(e) =>
                                                        startTransition(() =>
                                                            setSelectedLanguage(
                                                                e.target.value
                                                            )
                                                        )
                                                    }
                                                    style={{
                                                        width: "100%",
                                                        padding: "14px 16px",
                                                        border: `2px solid ${selectedLanguage === "Select" ? accentColor : primaryColor}`,
                                                        borderRadius: "10px",
                                                        backgroundColor:
                                                            cardColor,
                                                        color: textColor,
                                                        ...bodyFont,
                                                        fontSize: "17px",
                                                        outline: "none",
                                                        cursor: "pointer",
                                                        opacity:
                                                            selectedLanguage ===
                                                            "Select"
                                                                ? 0.6
                                                                : 1,
                                                        transition:
                                                            "all 0.2s ease",
                                                    }}
                                                    onFocus={(e) => {
                                                        e.currentTarget.style.borderColor =
                                                            primaryColor
                                                        e.currentTarget.style.boxShadow = `0 0 0 3px ${primaryColor}18`
                                                    }}
                                                    onBlur={(e) => {
                                                        e.currentTarget.style.borderColor =
                                                            selectedLanguage ===
                                                            "Select"
                                                                ? accentColor
                                                                : primaryColor
                                                        e.currentTarget.style.boxShadow =
                                                            "none"
                                                    }}
                                                    aria-label="Language selection"
                                                >
                                                    <option
                                                        value="Select"
                                                        disabled
                                                    >
                                                        Select
                                                    </option>
                                                    {languages.map((lang) => (
                                                        <option
                                                            key={lang}
                                                            value={lang}
                                                        >
                                                            {lang}
                                                        </option>
                                                    ))}
                                                </select>
                                            </div>

                                            <div>
                                                <div
                                                    style={{
                                                        ...bodyFont,
                                                        color: textColor,
                                                        marginBottom: "10px",
                                                        fontSize: "15px",
                                                        fontWeight: 700,
                                                    }}
                                                >
                                                    CTA Inclusion
                                                </div>
                                                <label
                                                    style={{
                                                        display: "flex",
                                                        alignItems: "center",
                                                        cursor: "pointer",
                                                        padding: "14px 16px",
                                                        border: `2px solid ${ctaInclusion ? primaryColor : accentColor}`,
                                                        borderRadius: "10px",
                                                        backgroundColor:
                                                            cardColor,
                                                        transition:
                                                            "all 0.2s ease",
                                                    }}
                                                    onMouseEnter={(e) => {
                                                        e.currentTarget.style.borderColor =
                                                            primaryColor
                                                    }}
                                                    onMouseLeave={(e) => {
                                                        e.currentTarget.style.borderColor =
                                                            ctaInclusion
                                                                ? primaryColor
                                                                : accentColor
                                                    }}
                                                >
                                                    <input
                                                        type="checkbox"
                                                        checked={ctaInclusion}
                                                        onChange={(e) =>
                                                            startTransition(
                                                                () =>
                                                                    setCtaInclusion(
                                                                        e.target
                                                                            .checked
                                                                    )
                                                            )
                                                        }
                                                        style={{
                                                            marginRight: "14px",
                                                            width: "20px",
                                                            height: "20px",
                                                            accentColor:
                                                                primaryColor,
                                                            cursor: "pointer",
                                                        }}
                                                        aria-label="Include call to action"
                                                    />
                                                    <span
                                                        style={{
                                                            ...bodyFont,
                                                            color: textColor,
                                                            fontSize: "17px",
                                                            fontWeight: 600,
                                                        }}
                                                    >
                                                        Include Call to Action
                                                    </span>
                                                </label>
                                            </div>
                                        </div>
                                    </motion.div>
                                )}

                                {/* Step 3.5: 개선된 채팅 UI */}
                                {currentStep === (3.5 as any) && (
                                    <motion.div
                                        key="step3.5"
                                        initial="initial"
                                        animate="in"
                                        exit="out"
                                        variants={pageVariants}
                                        transition={pageTransition}
                                        style={{
                                            position: "relative",
                                            width: "100%",
                                            height: "100%",
                                            display: "flex",
                                            flexDirection: "column",
                                        }}
                                    >
                                        {/* Header */}
                                        <div style={{ marginBottom: "16px" }}>
                                            <div
                                                style={{
                                                    ...headingFont,
                                                    color: textColor,
                                                    marginBottom: "8px",
                                                    fontSize: "26px",
                                                    fontWeight: 800,
                                                }}
                                            >
                                                Let's Refine Your Script
                                            </div>
                                            <div
                                                style={{
                                                    ...bodyFont,
                                                    color: textColor,
                                                    opacity: 0.7,
                                                    fontSize: "15px",
                                                    lineHeight: 1.5,
                                                }}
                                            >
                                                Answer a few questions to help
                                                AI create the perfect script
                                            </div>
                                        </div>

                                        {/* Previous answers chips */}
                                        {chatMessages.filter(
                                            (m) => m.type === "user"
                                        ).length > 0 && (
                                            <motion.div
                                                initial={{
                                                    opacity: 0,
                                                    height: 0,
                                                }}
                                                animate={{
                                                    opacity: 1,
                                                    height: "auto",
                                                }}
                                                style={{
                                                    marginBottom: "14px",
                                                    padding: "12px",
                                                    background: `linear-gradient(135deg, ${primaryColor}08 0%, ${primaryColor}03 100%)`,
                                                    borderRadius: "10px",
                                                    border: `1px solid ${primaryColor}15`,
                                                }}
                                            >
                                                <div
                                                    style={{
                                                        ...bodyFont,
                                                        fontSize: "11px",
                                                        color: primaryColor,
                                                        opacity: 0.7,
                                                        marginBottom: "8px",
                                                        textTransform:
                                                            "uppercase",
                                                        letterSpacing: "0.05em",
                                                        fontWeight: 600,
                                                    }}
                                                >
                                                    Previous Answers
                                                </div>
                                                <div
                                                    style={{
                                                        display: "flex",
                                                        gap: "6px",
                                                        flexWrap: "wrap",
                                                        maxHeight: "65px",
                                                        overflowY: "auto",
                                                    }}
                                                >
                                                    {chatMessages
                                                        .filter(
                                                            (m) =>
                                                                m.type ===
                                                                "user"
                                                        )
                                                        .map((msg, idx) => (
                                                            <div
                                                                key={msg.id}
                                                                style={{
                                                                    padding:
                                                                        "5px 11px",
                                                                    background: `linear-gradient(135deg, ${primaryColor}18 0%, ${primaryColor}10 100%)`,
                                                                    borderRadius:
                                                                        "14px",
                                                                    border: `1px solid ${primaryColor}25`,
                                                                    ...bodyFont,
                                                                    fontSize:
                                                                        "11px",
                                                                    color: primaryColor,
                                                                    fontWeight: 600,
                                                                    display:
                                                                        "flex",
                                                                    alignItems:
                                                                        "center",
                                                                    gap: "4px",
                                                                }}
                                                            >
                                                                <span
                                                                    style={{
                                                                        opacity: 0.6,
                                                                    }}
                                                                >
                                                                    {idx + 1}.
                                                                </span>
                                                                <span>
                                                                    {msg.content.slice(
                                                                        0,
                                                                        30
                                                                    )}
                                                                    {msg.content
                                                                        .length >
                                                                    30
                                                                        ? "..."
                                                                        : ""}
                                                                </span>
                                                            </div>
                                                        ))}
                                                </div>
                                            </motion.div>
                                        )}

                                        {/* Chat area */}
                                        <div
                                            ref={chatScrollRef}
                                            style={{
                                                flex: 1,
                                                minHeight: "500px",
                                                overflowY: "auto",
                                                marginBottom: "14px",
                                                padding: "18px",
                                                background: `linear-gradient(135deg, ${cardColor}cc 0%, ${cardColor}ee 100%)`,
                                                borderRadius: "14px",
                                                border: `1.5px solid ${accentColor}`,
                                                boxShadow: `inset 0 2px 8px rgba(0,0,0,0.08)`,
                                            }}
                                            role="log"
                                            aria-label="Chat conversation"
                                            aria-live="polite"
                                        >
                                            {isLoading &&
                                            chatMessages.length === 0 ? (
                                                <div
                                                    style={{
                                                        display: "flex",
                                                        flexDirection: "column",
                                                        justifyContent:
                                                            "center",
                                                        alignItems: "center",
                                                        height: "100%",
                                                        gap: "16px",
                                                    }}
                                                >
                                                    <motion.div
                                                        animate={{
                                                            rotate: 360,
                                                        }}
                                                        transition={{
                                                            duration: 1.2,
                                                            repeat: Infinity,
                                                            ease: "linear",
                                                        }}
                                                        style={{
                                                            width: "38px",
                                                            height: "38px",
                                                            borderRadius: "50%",
                                                            border: `3px solid ${accentColor}`,
                                                            borderTopColor:
                                                                primaryColor,
                                                        }}
                                                    />
                                                    <div
                                                        style={{
                                                            ...bodyFont,
                                                            color: textColor,
                                                            opacity: 0.7,
                                                            fontSize: "14px",
                                                            fontWeight: 600,
                                                        }}
                                                    >
                                                        Preparing questions...
                                                    </div>
                                                </div>
                                            ) : (
                                                <>
                                                    {chatMessages.map((msg) => (
                                                        <motion.div
                                                            key={msg.id}
                                                            initial={{
                                                                opacity: 0,
                                                                y: 10,
                                                            }}
                                                            animate={{
                                                                opacity: 1,
                                                                y: 0,
                                                            }}
                                                            transition={{
                                                                duration: 0.3,
                                                            }}
                                                            style={{
                                                                marginBottom:
                                                                    "18px",
                                                                display: "flex",
                                                                justifyContent:
                                                                    msg.type ===
                                                                    "user"
                                                                        ? "flex-end"
                                                                        : "flex-start",
                                                            }}
                                                        >
                                                            <div
                                                                style={{
                                                                    maxWidth:
                                                                        "80%",
                                                                }}
                                                            >
                                                                {msg.type ===
                                                                    "ai" && (
                                                                    <div
                                                                        style={{
                                                                            display:
                                                                                "flex",
                                                                            alignItems:
                                                                                "center",
                                                                            gap: "8px",
                                                                            marginBottom:
                                                                                "8px",
                                                                        }}
                                                                    >
                                                                        <div
                                                                            style={{
                                                                                width: "22px",
                                                                                height: "22px",
                                                                                borderRadius:
                                                                                    "50%",
                                                                                background: `linear-gradient(135deg, ${primaryColor} 0%, ${primaryColor}dd 100%)`,
                                                                                display:
                                                                                    "flex",
                                                                                alignItems:
                                                                                    "center",
                                                                                justifyContent:
                                                                                    "center",
                                                                                fontSize:
                                                                                    "11px",
                                                                                fontWeight: 700,
                                                                                color: "#FFFFFF",
                                                                            }}
                                                                        >
                                                                            AI
                                                                        </div>
                                                                        <div
                                                                            style={{
                                                                                ...bodyFont,
                                                                                fontSize:
                                                                                    "12px",
                                                                                color: textColor,
                                                                                fontWeight: 600,
                                                                            }}
                                                                        >
                                                                            AI
                                                                            Assistant
                                                                        </div>
                                                                    </div>
                                                                )}

                                                                <div
                                                                    style={{
                                                                        padding:
                                                                            "14px 18px",
                                                                        borderRadius:
                                                                            msg.type ===
                                                                            "user"
                                                                                ? "16px 16px 4px 16px"
                                                                                : "16px 16px 16px 4px",
                                                                        background:
                                                                            msg.type ===
                                                                            "user"
                                                                                ? `linear-gradient(135deg, ${primaryColor} 0%, ${primaryColor}ee 100%)`
                                                                                : backgroundColor,
                                                                        color:
                                                                            msg.type ===
                                                                            "user"
                                                                                ? "#FFFFFF"
                                                                                : textColor,
                                                                        ...bodyFont,
                                                                        fontSize:
                                                                            "14px",
                                                                        lineHeight: 1.6,
                                                                        boxShadow:
                                                                            msg.type ===
                                                                            "user"
                                                                                ? `0 4px 14px ${primaryColor}35`
                                                                                : `0 2px 8px rgba(0,0,0,0.12)`,
                                                                        border:
                                                                            msg.type ===
                                                                            "ai"
                                                                                ? `1.5px solid ${accentColor}`
                                                                                : "none",
                                                                        fontWeight:
                                                                            msg.type ===
                                                                            "user"
                                                                                ? 600
                                                                                : 500,
                                                                    }}
                                                                >
                                                                    {
                                                                        msg.content
                                                                    }
                                                                </div>

                                                                {!!msg.options
                                                                    ?.length && (
                                                                    <motion.div
                                                                        initial={{
                                                                            opacity: 0,
                                                                            y: -5,
                                                                        }}
                                                                        animate={{
                                                                            opacity: 1,
                                                                            y: 0,
                                                                        }}
                                                                        transition={{
                                                                            delay: 0.2,
                                                                        }}
                                                                        style={{
                                                                            display:
                                                                                "flex",
                                                                            gap: 8,
                                                                            flexWrap:
                                                                                "wrap",
                                                                            marginTop: 12,
                                                                        }}
                                                                    >
                                                                        {msg.options.map(
                                                                            (
                                                                                opt
                                                                            ) => (
                                                                                <motion.button
                                                                                    key={
                                                                                        opt
                                                                                    }
                                                                                    whileHover={{
                                                                                        scale: 1.04,
                                                                                        y: -1,
                                                                                    }}
                                                                                    whileTap={{
                                                                                        scale: 0.96,
                                                                                    }}
                                                                                    onClick={() =>
                                                                                        handleChatResponse(
                                                                                            opt,
                                                                                            msg.id
                                                                                        )
                                                                                    }
                                                                                    style={{
                                                                                        padding:
                                                                                            "9px 15px",
                                                                                        borderRadius: 11,
                                                                                        border: "none",
                                                                                        background: `linear-gradient(135deg, ${primaryColor} 0%, ${primaryColor}dd 100%)`,
                                                                                        color: "#000000",
                                                                                        cursor: "pointer",
                                                                                        ...bodyFont,
                                                                                        fontSize: 13,
                                                                                        fontWeight: 700,
                                                                                        transition:
                                                                                            "all 0.2s ease",
                                                                                        boxShadow: `0 2px 8px ${primaryColor}25`,
                                                                                    }}
                                                                                    onMouseEnter={(
                                                                                        e
                                                                                    ) => {
                                                                                        e.currentTarget.style.boxShadow = `0 4px 14px ${primaryColor}40`
                                                                                        e.currentTarget.style.transform =
                                                                                            "translateY(-1px)"
                                                                                    }}
                                                                                    onMouseLeave={(
                                                                                        e
                                                                                    ) => {
                                                                                        e.currentTarget.style.boxShadow = `0 2px 8px ${primaryColor}25`
                                                                                        e.currentTarget.style.transform =
                                                                                            "translateY(0)"
                                                                                    }}
                                                                                    aria-label={`Quick response: ${opt}`}
                                                                                >
                                                                                    {
                                                                                        opt
                                                                                    }
                                                                                </motion.button>
                                                                            )
                                                                        )}
                                                                    </motion.div>
                                                                )}
                                                            </div>
                                                        </motion.div>
                                                    ))}

                                                    {isTyping && (
                                                        <motion.div
                                                            initial={{
                                                                opacity: 0,
                                                            }}
                                                            animate={{
                                                                opacity: 1,
                                                            }}
                                                            style={{
                                                                display: "flex",
                                                                gap: "8px",
                                                                alignItems:
                                                                    "center",
                                                            }}
                                                        >
                                                            <div
                                                                style={{
                                                                    width: "22px",
                                                                    height: "22px",
                                                                    borderRadius:
                                                                        "50%",
                                                                    background: `linear-gradient(135deg, ${primaryColor} 0%, ${primaryColor}dd 100%)`,
                                                                    display:
                                                                        "flex",
                                                                    alignItems:
                                                                        "center",
                                                                    justifyContent:
                                                                        "center",
                                                                    fontSize:
                                                                        "11px",
                                                                    fontWeight: 700,
                                                                    color: "#FFFFFF",
                                                                }}
                                                            >
                                                                AI
                                                            </div>
                                                            <div
                                                                style={{
                                                                    display:
                                                                        "flex",
                                                                    gap: 5,
                                                                    padding:
                                                                        "14px 18px",
                                                                    borderRadius:
                                                                        "16px 16px 16px 4px",
                                                                    backgroundColor:
                                                                        backgroundColor,
                                                                    border: `1.5px solid ${accentColor}`,
                                                                    boxShadow:
                                                                        "0 2px 8px rgba(0,0,0,0.12)",
                                                                }}
                                                            >
                                                                {[0, 1, 2].map(
                                                                    (i) => (
                                                                        <motion.div
                                                                            key={
                                                                                i
                                                                            }
                                                                            animate={{
                                                                                y: [
                                                                                    0,
                                                                                    -6,
                                                                                    0,
                                                                                ],
                                                                            }}
                                                                            transition={{
                                                                                duration: 0.6,
                                                                                repeat: Infinity,
                                                                                delay:
                                                                                    i *
                                                                                    0.15,
                                                                            }}
                                                                            style={{
                                                                                width: 7,
                                                                                height: 7,
                                                                                borderRadius:
                                                                                    "50%",
                                                                                backgroundColor:
                                                                                    primaryColor,
                                                                                opacity: 0.7,
                                                                            }}
                                                                        />
                                                                    )
                                                                )}
                                                            </div>
                                                        </motion.div>
                                                    )}
                                                </>
                                            )}
                                        </div>

                                        {/* Input area */}
                                        <div
                                            style={{
                                                padding: "16px",
                                                background: `linear-gradient(135deg, ${cardColor} 0%, ${backgroundColor} 100%)`,
                                                borderRadius: "14px",
                                                border: `1.5px solid ${accentColor}`,
                                                boxShadow:
                                                    "0 -2px 12px rgba(0,0,0,0.06)",
                                            }}
                                        >
                                            <div
                                                style={{
                                                    display: "flex",
                                                    gap: "10px",
                                                    marginBottom: "12px",
                                                }}
                                            >
                                                <input
                                                    ref={inputRef}
                                                    type="text"
                                                    value={userInput}
                                                    onChange={(e) =>
                                                        setUserInput(
                                                            e.target.value
                                                        )
                                                    }
                                                    onKeyDown={(e) => {
                                                        if (
                                                            e.key === "Enter" &&
                                                            userInput.trim()
                                                        )
                                                            handleChatResponse(
                                                                userInput.trim()
                                                            )
                                                    }}
                                                    placeholder="Type your answer..."
                                                    style={{
                                                        flex: 1,
                                                        height: 50,
                                                        padding: "0 18px",
                                                        borderRadius: 13,
                                                        border: `1.5px solid ${userInput ? primaryColor : accentColor}`,
                                                        backgroundColor:
                                                            backgroundColor,
                                                        color: textColor,
                                                        ...bodyFont,
                                                        fontSize: 15,
                                                        outline: "none",
                                                        transition:
                                                            "all 0.2s ease",
                                                        fontWeight: 500,
                                                    }}
                                                    onFocus={(e) => {
                                                        e.target.style.borderColor =
                                                            primaryColor
                                                        e.target.style.boxShadow = `0 0 0 3px ${primaryColor}15`
                                                    }}
                                                    onBlur={(e) => {
                                                        e.target.style.borderColor =
                                                            userInput
                                                                ? primaryColor
                                                                : accentColor
                                                        e.target.style.boxShadow =
                                                            "none"
                                                    }}
                                                    aria-label="Type your answer"
                                                />
                                                <motion.button
                                                    whileHover={{
                                                        scale: userInput.trim()
                                                            ? 1.04
                                                            : 1,
                                                    }}
                                                    whileTap={{
                                                        scale: userInput.trim()
                                                            ? 0.96
                                                            : 1,
                                                    }}
                                                    onClick={() =>
                                                        userInput.trim() &&
                                                        handleChatResponse(
                                                            userInput.trim()
                                                        )
                                                    }
                                                    disabled={!userInput.trim()}
                                                    style={{
                                                        width: 50,
                                                        height: 50,
                                                        borderRadius: 13,
                                                        border: "none",
                                                        background:
                                                            userInput.trim()
                                                                ? `linear-gradient(135deg, ${primaryColor} 0%, ${primaryColor}ee 100%)`
                                                                : `${textColor}15`,
                                                        color: userInput.trim()
                                                            ? "#000"
                                                            : `${textColor}40`,
                                                        cursor: userInput.trim()
                                                            ? "pointer"
                                                            : "not-allowed",
                                                        display: "flex",
                                                        alignItems: "center",
                                                        justifyContent:
                                                            "center",
                                                        transition:
                                                            "all 0.2s ease",
                                                        boxShadow:
                                                            userInput.trim()
                                                                ? `0 4px 14px ${primaryColor}35`
                                                                : "none",
                                                    }}
                                                    aria-label="Send message"
                                                >
                                                    <svg
                                                        width="20"
                                                        height="20"
                                                        viewBox="0 0 24 24"
                                                        fill="none"
                                                        stroke="currentColor"
                                                        strokeWidth="2.5"
                                                        strokeLinecap="round"
                                                        strokeLinejoin="round"
                                                    >
                                                        <line
                                                            x1="22"
                                                            y1="2"
                                                            x2="11"
                                                            y2="13"
                                                        />
                                                        <polygon points="22 2 15 22 11 13 2 9 22 2" />
                                                    </svg>
                                                </motion.button>
                                            </div>

                                            <motion.button
                                                whileHover={{
                                                    scale: 1.01,
                                                    y: -1,
                                                }}
                                                whileTap={{ scale: 0.99 }}
                                                onClick={handleSkipRefinement}
                                                style={{
                                                    width: "100%",
                                                    padding: "11px",
                                                    borderRadius: 11,
                                                    border: `1.5px solid ${textColor}25`,
                                                    background: "transparent",
                                                    color: textColor,
                                                    cursor: "pointer",
                                                    ...bodyFont,
                                                    fontSize: 13,
                                                    fontWeight: 600,
                                                    transition: "all 0.2s ease",
                                                    opacity: 0.7,
                                                }}
                                                onMouseEnter={(e) => {
                                                    e.currentTarget.style.background = `${textColor}08`
                                                    e.currentTarget.style.opacity =
                                                        "1"
                                                    e.currentTarget.style.borderColor = `${textColor}40`
                                                }}
                                                onMouseLeave={(e) => {
                                                    e.currentTarget.style.background =
                                                        "transparent"
                                                    e.currentTarget.style.opacity =
                                                        "0.7"
                                                    e.currentTarget.style.borderColor = `${textColor}25`
                                                }}
                                                aria-label="Skip refinement"
                                            >
                                                Skip Refinement & Generate Now
                                            </motion.button>
                                        </div>

                                        {/* Skip confirmation modal */}
                                        <AnimatePresence>
                                            {showSkipConfirm && (
                                                <motion.div
                                                    initial={{ opacity: 0 }}
                                                    animate={{ opacity: 1 }}
                                                    exit={{ opacity: 0 }}
                                                    style={{
                                                        position: "absolute",
                                                        inset: 0,
                                                        backgroundColor:
                                                            "rgba(0,0,0,0.65)",
                                                        display: "flex",
                                                        alignItems: "center",
                                                        justifyContent:
                                                            "center",
                                                        zIndex: 100,
                                                        backdropFilter:
                                                            "blur(6px)",
                                                    }}
                                                    onClick={() =>
                                                        setShowSkipConfirm(
                                                            false
                                                        )
                                                    }
                                                    role="dialog"
                                                    aria-modal="true"
                                                    aria-labelledby="skip-dialog-title"
                                                >
                                                    <motion.div
                                                        initial={{
                                                            scale: 0.9,
                                                            y: 20,
                                                        }}
                                                        animate={{
                                                            scale: 1,
                                                            y: 0,
                                                        }}
                                                        exit={{
                                                            scale: 0.9,
                                                            y: 20,
                                                        }}
                                                        onClick={(e) =>
                                                            e.stopPropagation()
                                                        }
                                                        style={{
                                                            backgroundColor:
                                                                cardColor,
                                                            padding: "30px",
                                                            borderRadius:
                                                                "18px",
                                                            maxWidth: "420px",
                                                            border: `2px solid ${accentColor}`,
                                                            boxShadow:
                                                                "0 24px 60px rgba(0,0,0,0.5)",
                                                        }}
                                                    >
                                                        <div
                                                            id="skip-dialog-title"
                                                            style={{
                                                                ...headingFont,
                                                                fontSize:
                                                                    "24px",
                                                                color: textColor,
                                                                marginBottom:
                                                                    "16px",
                                                                fontWeight: 800,
                                                            }}
                                                        >
                                                            Skip Refinement?
                                                        </div>
                                                        <div
                                                            style={{
                                                                ...bodyFont,
                                                                fontSize:
                                                                    "15px",
                                                                color: textColor,
                                                                opacity: 0.85,
                                                                marginBottom:
                                                                    "26px",
                                                                lineHeight: 1.7,
                                                            }}
                                                        >
                                                            Answering these
                                                            questions helps AI
                                                            create a much more
                                                            personalized and
                                                            accurate script.
                                                            Skipping will
                                                            generate with
                                                            default settings.
                                                        </div>
                                                        <div
                                                            style={{
                                                                display: "flex",
                                                                gap: "12px",
                                                            }}
                                                        >
                                                            <motion.button
                                                                whileHover={{
                                                                    scale: 1.02,
                                                                }}
                                                                whileTap={{
                                                                    scale: 0.98,
                                                                }}
                                                                onClick={() =>
                                                                    setShowSkipConfirm(
                                                                        false
                                                                    )
                                                                }
                                                                style={{
                                                                    flex: 1,
                                                                    padding:
                                                                        "14px",
                                                                    borderRadius:
                                                                        "12px",
                                                                    border: `1.5px solid ${accentColor}`,
                                                                    background:
                                                                        "transparent",
                                                                    color: textColor,
                                                                    cursor: "pointer",
                                                                    ...bodyFont,
                                                                    fontSize:
                                                                        "15px",
                                                                    fontWeight: 600,
                                                                    transition:
                                                                        "all 0.2s ease",
                                                                }}
                                                                onMouseEnter={(
                                                                    e
                                                                ) => {
                                                                    e.currentTarget.style.background = `${textColor}10`
                                                                }}
                                                                onMouseLeave={(
                                                                    e
                                                                ) => {
                                                                    e.currentTarget.style.background =
                                                                        "transparent"
                                                                }}
                                                                aria-label="Cancel skip"
                                                            >
                                                                Continue
                                                            </motion.button>
                                                            <motion.button
                                                                whileHover={{
                                                                    scale: 1.02,
                                                                }}
                                                                whileTap={{
                                                                    scale: 0.98,
                                                                }}
                                                                onClick={
                                                                    confirmSkip
                                                                }
                                                                style={{
                                                                    flex: 1,
                                                                    padding:
                                                                        "14px",
                                                                    borderRadius:
                                                                        "12px",
                                                                    border: "none",
                                                                    background: `linear-gradient(135deg, ${primaryColor} 0%, ${primaryColor}ee 100%)`,
                                                                    color: "#000",
                                                                    cursor: "pointer",
                                                                    ...bodyFont,
                                                                    fontSize:
                                                                        "15px",
                                                                    fontWeight: 700,
                                                                    boxShadow: `0 4px 16px ${primaryColor}35`,
                                                                }}
                                                                aria-label="Confirm skip"
                                                            >
                                                                Skip Anyway
                                                            </motion.button>
                                                        </div>
                                                    </motion.div>
                                                </motion.div>
                                            )}
                                        </AnimatePresence>
                                    </motion.div>
                                )}

                                {currentStep === 4 && (
                                    <motion.div
                                        key="step4"
                                        initial="initial"
                                        animate="in"
                                        exit="out"
                                        variants={pageVariants}
                                        transition={pageTransition}
                                        style={{
                                            position: "relative",
                                            width: "100%",
                                            height: "auto",
                                        }}
                                    >
                                        <div
                                            style={{
                                                ...headingFont,
                                                color: textColor,
                                                marginBottom: "14px",
                                                fontSize: "28px",
                                                fontWeight: 800,
                                            }}
                                        >
                                            Your Video{" "}
                                            {outputType === "complete"
                                                ? "Package"
                                                : "Script"}
                                        </div>
                                        <div
                                            style={{
                                                ...bodyFont,
                                                color: textColor,
                                                opacity: 0.75,
                                                marginBottom: "18px",
                                                fontSize: "16px",
                                            }}
                                        >
                                            AI-generated{" "}
                                            {outputType === "complete"
                                                ? "complete package"
                                                : "script"}{" "}
                                            for your{" "}
                                            {selectedStyle === "other" &&
                                            customStyleName
                                                ? customStyleName.toLowerCase()
                                                : videoStyles
                                                      .find(
                                                          (s) =>
                                                              s.id ===
                                                              selectedStyle
                                                      )
                                                      ?.title?.toLowerCase()}{" "}
                                            video: "{keyword}"
                                        </div>

                                        {apiResults &&
                                            scoreData &&
                                            !isEditMode &&
                                            !isLoading && (
                                                <ScoreDisplay
                                                    scores={scoreData}
                                                />
                                            )}

                                        <div
                                            style={{
                                                padding: "18px",
                                                backgroundColor: cardColor,
                                                borderRadius: "12px",
                                                border: `1.5px solid ${accentColor}`,
                                                minHeight: "230px",
                                                height: "auto",
                                                marginBottom: "18px",
                                            }}
                                            role="region"
                                            aria-label="Generated script content"
                                        >
                                            {isLoading ? (
                                                <div
                                                    style={{
                                                        textAlign: "center",
                                                        paddingTop: "60px",
                                                    }}
                                                >
                                                    <motion.div
                                                        animate={{
                                                            rotate: 360,
                                                        }}
                                                        transition={{
                                                            duration: 1.5,
                                                            repeat: Infinity,
                                                            ease: "linear",
                                                        }}
                                                        style={{
                                                            width: "40px",
                                                            height: "40px",
                                                            border: `3px solid ${accentColor}`,
                                                            borderTop: `3px solid ${primaryColor}`,
                                                            borderRadius: "50%",
                                                            margin: "0 auto 16px",
                                                        }}
                                                        aria-hidden="true"
                                                    />
                                                    <div
                                                        style={{
                                                            ...bodyFont,
                                                            color: textColor,
                                                            opacity: 0.8,
                                                            fontSize: "16px",
                                                            marginBottom:
                                                                "12px",
                                                            fontWeight: 600,
                                                        }}
                                                    >
                                                        {regenerateRequest
                                                            ? "Regenerating with changes..."
                                                            : `Generating ${outputType === "complete" ? "complete package" : "script"}...`}
                                                    </div>
                                                    {retryCount > 0 && (
                                                        <div
                                                            style={{
                                                                ...bodyFont,
                                                                color: textColor,
                                                                opacity: 0.6,
                                                                fontSize:
                                                                    "13px",
                                                                marginBottom:
                                                                    "16px",
                                                            }}
                                                        >
                                                            Retry attempt{" "}
                                                            {retryCount}... AI
                                                            is busy, please wait
                                                        </div>
                                                    )}
                                                    <div
                                                        style={{
                                                            width: "80%",
                                                            height: "6px",
                                                            backgroundColor:
                                                                accentColor,
                                                            borderRadius: "3px",
                                                            margin: "0 auto",
                                                            overflow: "hidden",
                                                            position:
                                                                "relative",
                                                        }}
                                                        role="progressbar"
                                                        aria-valuenow={
                                                            loadingProgress
                                                        }
                                                        aria-valuemin={0}
                                                        aria-valuemax={100}
                                                        aria-label="Generation progress"
                                                    >
                                                        <motion.div
                                                            initial={{
                                                                width: "0%",
                                                            }}
                                                            animate={{
                                                                width: `${loadingProgress}%`,
                                                            }}
                                                            transition={{
                                                                duration: 0.5,
                                                            }}
                                                            style={{
                                                                height: "100%",
                                                                background: `linear-gradient(90deg, ${primaryColor} 0%, ${primaryColor}dd 100%)`,
                                                                boxShadow: `0 0 10px ${primaryColor}50`,
                                                            }}
                                                        />
                                                    </div>
                                                    <div
                                                        style={{
                                                            ...bodyFont,
                                                            color: textColor,
                                                            opacity: 0.6,
                                                            fontSize: "13px",
                                                            marginTop: "12px",
                                                        }}
                                                    >
                                                        Estimated time:{" "}
                                                        {Math.max(
                                                            5,
                                                            Math.round(
                                                                estimatedTime *
                                                                    (1 -
                                                                        loadingProgress /
                                                                            100)
                                                            )
                                                        )}{" "}
                                                        seconds
                                                    </div>
                                                </div>
                                            ) : apiError ? (
                                                <div
                                                    style={{
                                                        textAlign: "center",
                                                        paddingTop: "60px",
                                                    }}
                                                    role="alert"
                                                    aria-live="assertive"
                                                >
                                                    <div
                                                        style={{
                                                            width: "56px",
                                                            height: "56px",
                                                            borderRadius: "50%",
                                                            backgroundColor: `${apiError.type === "network" ? "#f59e0b" : "#ef4444"}20`,
                                                            display: "flex",
                                                            alignItems:
                                                                "center",
                                                            justifyContent:
                                                                "center",
                                                            margin: "0 auto 20px",
                                                            border: `2px solid ${apiError.type === "network" ? "#f59e0b" : "#ef4444"}`,
                                                        }}
                                                        aria-hidden="true"
                                                    >
                                                        <svg
                                                            width="28"
                                                            height="28"
                                                            viewBox="0 0 24 24"
                                                            fill="none"
                                                            stroke={
                                                                apiError.type ===
                                                                "network"
                                                                    ? "#f59e0b"
                                                                    : "#ef4444"
                                                            }
                                                            strokeWidth="2.5"
                                                            strokeLinecap="round"
                                                            strokeLinejoin="round"
                                                        >
                                                            <circle
                                                                cx="12"
                                                                cy="12"
                                                                r="10"
                                                            />
                                                            <line
                                                                x1="12"
                                                                y1="8"
                                                                x2="12"
                                                                y2="12"
                                                            />
                                                            <line
                                                                x1="12"
                                                                y1="16"
                                                                x2="12.01"
                                                                y2="16"
                                                            />
                                                        </svg>
                                                    </div>
                                                    <div
                                                        style={{
                                                            ...bodyFont,
                                                            color:
                                                                apiError.type ===
                                                                "network"
                                                                    ? "#f59e0b"
                                                                    : "#ef4444",
                                                            marginBottom:
                                                                "12px",
                                                            fontSize: "18px",
                                                            fontWeight: 700,
                                                        }}
                                                    >
                                                        {apiError.type ===
                                                        "network"
                                                            ? "Connection Issue"
                                                            : apiError.type ===
                                                                "timeout"
                                                              ? "Request Timed Out"
                                                              : "Generation Failed"}
                                                    </div>
                                                    <div
                                                        style={{
                                                            ...bodyFont,
                                                            color: textColor,
                                                            opacity: 0.8,
                                                            fontSize: "15px",
                                                            marginBottom:
                                                                "20px",
                                                            lineHeight: 1.6,
                                                            maxWidth: "400px",
                                                            margin: "0 auto 20px",
                                                        }}
                                                    >
                                                        {apiError.message}
                                                    </div>
                                                    {apiError.retryable && (
                                                        <div
                                                            style={{
                                                                display: "flex",
                                                                gap: "12px",
                                                                justifyContent:
                                                                    "center",
                                                            }}
                                                        >
                                                            <motion.button
                                                                whileHover={{
                                                                    scale: 1.03,
                                                                }}
                                                                whileTap={{
                                                                    scale: 0.97,
                                                                }}
                                                                onClick={
                                                                    fetchFinalScript
                                                                }
                                                                style={{
                                                                    padding:
                                                                        "12px 20px",
                                                                    backgroundColor:
                                                                        primaryColor,
                                                                    border: "none",
                                                                    borderRadius:
                                                                        "10px",
                                                                    color: "#000",
                                                                    cursor: "pointer",
                                                                    ...buttonFont,
                                                                    fontSize:
                                                                        "15px",
                                                                    fontWeight: 700,
                                                                }}
                                                                aria-label="Retry generation"
                                                            >
                                                                Try Again
                                                            </motion.button>
                                                            <motion.button
                                                                whileHover={{
                                                                    scale: 1.03,
                                                                }}
                                                                whileTap={{
                                                                    scale: 0.97,
                                                                }}
                                                                onClick={() => {
                                                                    setApiError(
                                                                        null
                                                                    )
                                                                    handleBack()
                                                                }}
                                                                style={{
                                                                    padding:
                                                                        "12px 20px",
                                                                    backgroundColor:
                                                                        "transparent",
                                                                    border: `1.5px solid ${accentColor}`,
                                                                    borderRadius:
                                                                        "10px",
                                                                    color: textColor,
                                                                    cursor: "pointer",
                                                                    ...buttonFont,
                                                                    fontSize:
                                                                        "15px",
                                                                    fontWeight: 600,
                                                                }}
                                                                aria-label="Go back to previous step"
                                                            >
                                                                Go Back
                                                            </motion.button>
                                                        </div>
                                                    )}
                                                </div>
                                            ) : apiResults ? (
                                                renderResults()
                                            ) : (
                                                <div
                                                    style={{
                                                        textAlign: "center",
                                                        paddingTop: "60px",
                                                    }}
                                                >
                                                    <div
                                                        style={{
                                                            ...bodyFont,
                                                            color: textColor,
                                                            opacity: 0.5,
                                                            fontSize: "16px",
                                                        }}
                                                    >
                                                        Ready to generate your{" "}
                                                        {outputType ===
                                                        "complete"
                                                            ? "complete package"
                                                            : "script"}
                                                    </div>
                                                </div>
                                            )}
                                        </div>

                                        {apiResults && !isEditMode && (
                                            <motion.div
                                                initial={{ opacity: 0, y: 10 }}
                                                animate={{ opacity: 1, y: 0 }}
                                                transition={{
                                                    duration: 0.3,
                                                    delay: 0.2,
                                                }}
                                                style={{
                                                    marginTop: "18px",
                                                    display: "flex",
                                                    gap: "12px",
                                                    justifyContent: "center",
                                                    flexWrap: "wrap",
                                                }}
                                            >
                                                <motion.button
                                                    whileHover={{
                                                        scale: 1.02,
                                                        y: -2,
                                                    }}
                                                    whileTap={{ scale: 0.98 }}
                                                    onClick={copyToClipboard}
                                                    style={{
                                                        position: "relative",
                                                        padding: "12px 20px",
                                                        backgroundColor:
                                                            copySuccess
                                                                ? "#10b981"
                                                                : primaryColor,
                                                        border: `1.5px solid ${copySuccess ? "#10b981" : primaryColor}`,
                                                        borderRadius: "11px",
                                                        color: copySuccess
                                                            ? "#ffffff"
                                                            : "#000000",
                                                        cursor: "pointer",
                                                        ...bodyFont,
                                                        fontSize: "14px",
                                                        fontWeight: 700,
                                                        transition:
                                                            "all 0.2s ease",
                                                        boxShadow: copySuccess
                                                            ? "0 4px 16px #10b98145"
                                                            : `0 2px 10px ${primaryColor}35`,
                                                        overflow: "hidden",
                                                    }}
                                                    onMouseEnter={(e) => {
                                                        if (!copySuccess) {
                                                            e.currentTarget.style.backgroundColor = `${primaryColor}dd`
                                                            e.currentTarget.style.boxShadow = `0 4px 16px ${primaryColor}45`
                                                        }
                                                    }}
                                                    onMouseLeave={(e) => {
                                                        if (!copySuccess) {
                                                            e.currentTarget.style.backgroundColor =
                                                                primaryColor
                                                            e.currentTarget.style.boxShadow = `0 2px 10px ${primaryColor}35`
                                                        }
                                                    }}
                                                    aria-label={
                                                        copySuccess
                                                            ? "Copied to clipboard"
                                                            : "Copy to clipboard"
                                                    }
                                                >
                                                    {copySuccess && (
                                                        <motion.div
                                                            initial={{
                                                                scale: 0,
                                                            }}
                                                            animate={{
                                                                scale: 1,
                                                            }}
                                                            transition={{
                                                                type: "spring",
                                                                duration: 0.4,
                                                            }}
                                                            style={{
                                                                position:
                                                                    "absolute",
                                                                inset: 0,
                                                                backgroundColor:
                                                                    "#10b981",
                                                                zIndex: -1,
                                                            }}
                                                            aria-hidden="true"
                                                        />
                                                    )}
                                                    {copySuccess
                                                        ? "Copied!"
                                                        : "Copy to Clipboard"}
                                                </motion.button>

                                                <motion.button
                                                    whileHover={{
                                                        scale: 1.02,
                                                        y: -2,
                                                    }}
                                                    whileTap={{ scale: 0.98 }}
                                                    onClick={() => {
                                                        setIsEditMode(true)
                                                        setEditedScript(
                                                            typeof apiResults ===
                                                                "string"
                                                                ? apiResults
                                                                : apiResults?.script ||
                                                                      ""
                                                        )
                                                    }}
                                                    style={{
                                                        padding: "12px 20px",
                                                        background: `linear-gradient(135deg, ${primaryColor} 0%, ${primaryColor}dd 100%)`,
                                                        border: `1.5px solid ${primaryColor}`,
                                                        borderRadius: "11px",
                                                        color: "#000000",
                                                        cursor: "pointer",
                                                        ...bodyFont,
                                                        fontSize: "14px",
                                                        fontWeight: 700,
                                                        transition:
                                                            "all 0.2s ease",
                                                        boxShadow: `0 2px 10px ${primaryColor}35`,
                                                    }}
                                                    onMouseEnter={(e) => {
                                                        e.currentTarget.style.background =
                                                            primaryColor
                                                        e.currentTarget.style.boxShadow = `0 4px 16px ${primaryColor}45`
                                                    }}
                                                    onMouseLeave={(e) => {
                                                        e.currentTarget.style.background = `linear-gradient(135deg, ${primaryColor} 0%, ${primaryColor}dd 100%)`
                                                        e.currentTarget.style.boxShadow = `0 2px 10px ${primaryColor}35`
                                                    }}
                                                    aria-label="Enhance script with AI"
                                                >
                                                    Enhance with AI
                                                </motion.button>

                                                <motion.button
                                                    whileHover={{
                                                        scale: 1.02,
                                                        y: -2,
                                                    }}
                                                    whileTap={{ scale: 0.98 }}
                                                    onClick={downloadScript}
                                                    style={{
                                                        padding: "12px 20px",
                                                        backgroundColor:
                                                            cardColor,
                                                        border: `1.5px solid ${textColor}65`,
                                                        borderRadius: "11px",
                                                        color: textColor,
                                                        cursor: "pointer",
                                                        ...bodyFont,
                                                        fontSize: "14px",
                                                        fontWeight: 600,
                                                        transition:
                                                            "all 0.2s ease",
                                                        boxShadow:
                                                            "0 2px 10px rgba(0,0,0,0.1)",
                                                    }}
                                                    onMouseEnter={(e) => {
                                                        e.currentTarget.style.backgroundColor = `${textColor}18`
                                                        e.currentTarget.style.borderColor =
                                                            textColor
                                                        e.currentTarget.style.boxShadow =
                                                            "0 4px 16px rgba(0,0,0,0.15)"
                                                    }}
                                                    onMouseLeave={(e) => {
                                                        e.currentTarget.style.backgroundColor =
                                                            cardColor
                                                        e.currentTarget.style.borderColor = `${textColor}65`
                                                        e.currentTarget.style.boxShadow =
                                                            "0 2px 10px rgba(0,0,0,0.1)"
                                                    }}
                                                    aria-label="Download script"
                                                >
                                                    Download
                                                </motion.button>

                                                <motion.button
                                                    whileHover={{
                                                        scale: 1.02,
                                                        y: -2,
                                                    }}
                                                    whileTap={{ scale: 0.98 }}
                                                    onClick={() => {
                                                        setApiResults(null)
                                                        setScoreData(null)
                                                        fetchFinalScript()
                                                    }}
                                                    style={{
                                                        padding: "12px 20px",
                                                        backgroundColor:
                                                            cardColor,
                                                        border: `1.5px solid ${textColor}65`,
                                                        borderRadius: "11px",
                                                        color: textColor,
                                                        cursor: "pointer",
                                                        ...bodyFont,
                                                        fontSize: "14px",
                                                        fontWeight: 600,
                                                        transition:
                                                            "all 0.2s ease",
                                                        boxShadow:
                                                            "0 2px 10px rgba(0,0,0,0.1)",
                                                    }}
                                                    onMouseEnter={(e) => {
                                                        e.currentTarget.style.backgroundColor = `${textColor}18`
                                                        e.currentTarget.style.borderColor =
                                                            textColor
                                                        e.currentTarget.style.boxShadow =
                                                            "0 4px 16px rgba(0,0,0,0.15)"
                                                    }}
                                                    onMouseLeave={(e) => {
                                                        e.currentTarget.style.backgroundColor =
                                                            cardColor
                                                        e.currentTarget.style.borderColor = `${textColor}65`
                                                        e.currentTarget.style.boxShadow =
                                                            "0 2px 10px rgba(0,0,0,0.1)"
                                                    }}
                                                    aria-label="Generate new script"
                                                >
                                                    Generate New
                                                </motion.button>
                                            </motion.div>
                                        )}
                                    </motion.div>
                                )}
                            </AnimatePresence>
                        </div>

                        {currentStep !== 4 && (
                            <div
                                style={{
                                    display: "flex",
                                    justifyContent: "space-between",
                                    alignItems: "center",
                                    marginTop: "18px",
                                    paddingTop: "14px",
                                    borderTop: `1px solid ${accentColor}`,
                                }}
                            >
                                <motion.button
                                    whileHover={{
                                        scale: currentStep > 1 ? 1.02 : 1,
                                    }}
                                    whileTap={{
                                        scale: currentStep > 1 ? 0.98 : 1,
                                    }}
                                    onClick={handleBack}
                                    disabled={currentStep === 1}
                                    style={{
                                        padding: "13px 22px",
                                        backgroundColor:
                                            currentStep > 1
                                                ? cardColor
                                                : backgroundColor,
                                        border: `2px solid ${currentStep > 1 ? textColor : `${textColor}25`}`,
                                        borderRadius: "10px",
                                        color:
                                            currentStep > 1
                                                ? textColor
                                                : `${textColor}40`,
                                        cursor:
                                            currentStep > 1
                                                ? "pointer"
                                                : "not-allowed",
                                        ...buttonFont,
                                        fontSize: "15px",
                                        fontWeight: 600,
                                        transition: "all 0.2s ease",
                                    }}
                                    aria-label="Go to previous step"
                                    aria-disabled={currentStep === 1}
                                >
                                    Back
                                </motion.button>

                                <motion.button
                                    whileHover={{
                                        scale: canProceed() ? 1.02 : 1,
                                    }}
                                    whileTap={{
                                        scale: canProceed() ? 0.98 : 1,
                                    }}
                                    onClick={handleNext}
                                    disabled={
                                        !canProceed() || currentStep === 4
                                    }
                                    style={{
                                        padding: "13px 22px",
                                        backgroundColor:
                                            canProceed() && currentStep < 4
                                                ? primaryColor
                                                : cardColor,
                                        border:
                                            canProceed() && currentStep < 4
                                                ? `2px solid ${primaryColor}`
                                                : `2px solid ${textColor}25`,
                                        borderRadius: "10px",
                                        color:
                                            canProceed() && currentStep < 4
                                                ? "#000000"
                                                : `${textColor}40`,
                                        cursor:
                                            canProceed() && currentStep < 4
                                                ? "pointer"
                                                : "not-allowed",
                                        ...buttonFont,
                                        display:
                                            currentStep === 4
                                                ? "none"
                                                : "block",
                                        fontSize: "15px",
                                        fontWeight: 700,
                                        transition: "all 0.2s ease",
                                        boxShadow:
                                            canProceed() && currentStep < 4
                                                ? `0 2px 10px ${primaryColor}30`
                                                : "none",
                                    }}
                                    aria-label="Go to next step"
                                    aria-disabled={!canProceed()}
                                >
                                    Next
                                </motion.button>
                            </div>
                        )}
                    </motion.div>
                )}
            </AnimatePresence>
        </div>
    )
}

addPropertyControls(IdeaGenerator, {
    preview: {
        type: ControlType.Boolean,
        title: "Show in Preview",
        defaultValue: true,
        enabledTitle: "Show",
        disabledTitle: "Hide",
    },
    backgroundColor: {
        type: ControlType.Color,
        title: "Background",
        defaultValue: "#1A1A1A",
    },
    cardColor: {
        type: ControlType.Color,
        title: "Card Background",
        defaultValue: "#2A2A2A",
    },
    primaryColor: {
        type: ControlType.Color,
        title: "Primary Color",
        defaultValue: "#FFFFFF",
    },
    textColor: {
        type: ControlType.Color,
        title: "Text Color",
        defaultValue: "#FFFFFF",
    },
    accentColor: {
        type: ControlType.Color,
        title: "Accent Color",
        defaultValue: "#333333",
    },
    headingFont: {
        type: ControlType.Font,
        title: "Heading Font",
        defaultValue: {
            fontSize: "22px",
            variant: "Bold",
            letterSpacing: "-0.02em",
            lineHeight: "1.2em",
        },
        controls: "extended",
        defaultFontType: "sans-serif",
    },
    bodyFont: {
        type: ControlType.Font,
        title: "Body Font",
        defaultValue: {
            fontSize: "15px",
            variant: "Medium",
            letterSpacing: "-0.01em",
            lineHeight: "1.4em",
        },
        controls: "extended",
        defaultFontType: "sans-serif",
    },
    buttonFont: {
        type: ControlType.Font,
        title: "Button Font",
        defaultValue: {
            fontSize: "13px",
            variant: "Semibold",
            letterSpacing: "-0.01em",
            lineHeight: "1em",
        },
        controls: "extended",
        defaultFontType: "sans-serif",
    },
})
